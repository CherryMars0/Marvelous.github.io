<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>前端大文件切片上传</title>
    <link href="/Marvelous.github.io/2022/06/29/%E5%89%8D%E7%AB%AF%E5%A4%A7%E6%96%87%E4%BB%B6%E5%88%87%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
    <url>/Marvelous.github.io/2022/06/29/%E5%89%8D%E7%AB%AF%E5%A4%A7%E6%96%87%E4%BB%B6%E5%88%87%E7%89%87%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<p>大文件分割的上传一般由前端完成，故将此方法所涉及到的知识点做一个整体的学习笔记。</p><h4 id="一-自执行函数与闭包："><a href="#一-自执行函数与闭包：" class="headerlink" title="一.自执行函数与闭包："></a>一.自执行函数与闭包：</h4><p><code>自执行函数</code>:自执行函数就是当它被定义出来，就会自动执行的函数。不需要调用，传参也很方便。就上面的函数。自执行函数是很自私的，它的内部可以访问全局变量。但是除了自执行函数自身内部，是无法访问它的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 最常见的自执行函数</span><br>!<span class="hljs-keyword">function</span>(<span class="hljs-params">接收参数</span>)&#123;<br>    使用参数<br>&#125;(传入参数);<br><br><span class="hljs-comment">// 将感叹号换成括号概括整个函数体，暴露出需要的参数</span><br>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">接收参数</span>)&#123;<br>    使用参数<br>&#125;)(传入参数);<br><br><span class="hljs-comment">// 也可将整个函数用括号概括</span><br>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">接收参数</span>)&#123;<br>    使用函数<br>&#125;(传入参数));<br><br><span class="hljs-comment">// 自执行匿名函数，较常用</span><br>;(<span class="hljs-function">(<span class="hljs-params">接收参数</span>)=&gt;</span>&#123; <br>    使用参数<br>&#125;)(传入参数);<br><br><span class="hljs-comment">// 第一个分号是防止webpack在打包时此闭包与其他函数发生错误，而第二个分号是代码规范</span><br></code></pre></td></tr></table></figure><p><code>闭包</code>：声明在一个函数中的函数，叫做闭包函数。一般将自执行函数和闭包联合一起使用，内部函数总是可以访问其所在的外部函数中声明的参数和变量，即使在其外部函数被返回（寿命终结）了之后。</p><p><code>闭包特点</code>：</p><p>​1.让函数外部访问函数内部变量成为可能；</p><p>​2.局部变量会常驻在内存中，不会被垃圾回收机制回收；</p><p>​3.避免使用全局变量，防止全局变量污染；</p><p>​4.匿名自执行函数可减少内存消耗，但会造成内存泄漏（内存长期占用而不被释放），变量使用结束后应当手动赋值为null，并且涉及到跨域访问，会导致性能上的损失;</p><p>闭包就是可以创建一个独立的环境，每个闭包里面的环境都是独立的，互不干扰。闭包会发生内存泄漏，每次外部函数执行的时候，外部函数的引用地址不同，都会重新创建一个新的地址。但凡是当前活动对象中有被内部子集引用的数据，那么这个时候，这个数据不删除，保留一根指针给内部活动对象。最终，闭包找到的是同一地址中父级函数中对应变量最终的值。</p><p><code>闭包实现的三种基本方式</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.函数嵌套函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun1</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fun2</span>(<span class="hljs-params"></span>)&#123;<br>        <br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 2.父函数返回子函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun1</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">fun2</span>(<span class="hljs-params"></span>)&#123;<br>        <br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 3.自执行函数内定义函数</span><br>;(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">fun2</span>(<span class="hljs-params"></span>)&#123;<br>        <br>    &#125;<br>    <br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">init</span> = (<span class="hljs-params"></span>) =&gt;&#123;<br>        <br>    &#125;<br>&#125;)();<br></code></pre></td></tr></table></figure><h4 id="二-async-await和Promise"><a href="#二-async-await和Promise" class="headerlink" title="二.async,await和Promise:"></a>二.async,await和Promise:</h4><p>首先要明白，javascript 的运行环境是单线程非阻塞式的，也就是说在某一时刻在 javascript 的线程上只允许存在一个任务，如果存在多个任务，则必须排队进行，单线程也是 javascript 的基石。因为是单线程的约束，所以在遇到一些不能立即执行的函数时（阻塞代码），javascript 就会等待阻塞代码执行，从而无法继续向下执行，影响程序性能，所以在设计之初开发人员就注意到了这一点，从而加入了非阻塞机制，非阻塞机制将那些阻塞代码暂时挂起（pending）同时给阻塞代码设置一个回调函数，然后去执行阻塞代码之后的代码，等阻塞代码执行完毕后再执行回调函数。虽然非阻塞机制很好的解决了代码执行性能的问题，但也同时将原先同步的 javascript 变成了部分异步的 javascript 。使得在同步和异步之间，异步和异步之间的执行顺序变得难以控制。</p><p>在有些业务逻辑中，我们必须将一些在 javascript 中异步执行的函数变为同步函数，例如数据请求与渲染的问题，数据请求为一个阻塞代码块即异步操作，而数据渲染为同步操作，根据业务逻辑，我们必须等待数据请求完毕（异步操作完成）再进行数据的渲染。根据 javascript 的逻辑，此时会将数据请求操作（异步操作）挂起，进而直接进行数据渲染，此时的数据还没有请求得到，就会出现渲染失败的结果。</p><p>为了解决这种问题，在 ECMAScript 中提供了Promise 类，目的是更加优雅地书写复杂的异步任务。</p><p>为了进一步的简化 Promise 类的实现，又产生了对 Promise 的 async 和 await 语法糖。</p><p><code>同步和异步</code>: 可以改变程序执行顺序的操作就可以看成异步操作，通常实现一个异步操作的方式为函数指定回调函数，当主线程开始执行异步任务，就是执行相应的回调函数。而按照程序书写顺序执行则是同步操作。</p><p><code>Promise</code>: Promise 为这种改变程序执行顺序的方法提供了一个整体的解决方案，他是一种将异步操作以同步操作的形式表达方式，避免了层层嵌套的回调函数，提供了统一的控制接口。所以 Promise 还是单线程，并非多线程实现。值得注意的是，Promise 一旦建立就无法取消，如果不设置回调函数，promise 内部抛出的错误不会反映到外部。当处于 Pending 状态时，无法得知进展到哪一个阶段。</p><p><code>Promise三个状态</code>：</p><p>​1.pending: Promise的初始状态，等到任务完成或是被拒绝。</p><p>​2.resolved: 执行完成并且执行成功的状态。</p><p>​3.rejected: 执行完成并且执行失败的状态。</p><p>​注：此三个状态相互独立，不能相互逆转。</p><p><code>Promise的回调</code>：</p><p>​如果使用 Promise 对象，则必须实现 then 方法，then 也是 Promise 的核心。而且 then 方法必须返回一个 promise 对象，同一个 promise 对象可以注册多个 then 方法，并且回调的执行顺序和他们注册的顺序一致。</p><p>​then方法接收两个回调函数：1.成功时的回调（value）。</p><p>​   2.失败时的回调（error）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>       <span class="hljs-keyword">if</span>()&#123; <span class="hljs-comment">// 异步执行函数</span><br>           <span class="hljs-title function_">resolve</span>(data);<br>       &#125;<span class="hljs-keyword">else</span>&#123;<br>           <span class="hljs-title function_">reject</span>(error):<br>       &#125;<br>   &#125;);<br><br>promise.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>)=&gt;</span>&#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value) <span class="hljs-comment">// 回调成功后执行</span><br>   &#125;,(e)&#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">error</span>) <span class="hljs-comment">// 回调失败后执行</span><br>   &#125;);<br></code></pre></td></tr></table></figure><p>Promise 的 then 在重复链式调用时，不会向下继承异步执行函数执行成功后在Promise函数中获取的值（一般为异步执行函数return的值），并且链式调用不可逆：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>       <span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>);<br>   &#125;);<br><br>promise.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>)=&gt;</span>&#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value) <span class="hljs-comment">// 1</span><br>       <span class="hljs-keyword">return</span> value*<span class="hljs-number">2</span>;<br>   &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>)=&gt;</span>&#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)  <span class="hljs-comment">// 2</span><br>   &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>)=&gt;</span>&#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value) <span class="hljs-comment">// undefined 上层没有返回 Promise 对象，则找不到 value</span><br>   &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>)=&gt;</span>&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;Marvelous&#x27;</span>); <span class="hljs-comment">// 返回一个 Promise 对象，value为Marvelous,此时的 value 也为 undefined</span><br>   &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>)=&gt;</span>&#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value) <span class="hljs-comment">// Marvelous[resolve]</span><br>   &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">value</span>)=&gt;</span>&#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)  <span class="hljs-comment">// 上一个then没有返回值，则回调失败，则向下层传递 Promise.reject 对象</span><br>   &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value) <span class="hljs-comment">// reject 由于上一层定义的是Promise.reject 所以要执行返回失败的函数。</span><br>   &#125;);<br></code></pre></td></tr></table></figure><p><code>finally</code>:它会在 Promise 链结束之后执行，可以看作是 Promise 处理完毕后的一个回调函数，无论失败与否都会调用。如果在页面中使用了例如加载动画等，都可以在此处关闭它。</p><p><code>async</code>: 异步函数，可将字符 async 加在函数头部使得该函数变为异步函数，一般情况下该函数要返回值一个Promise对象。</p><p> Promise 其异步结果是通过 .then() 或者 .catch() 方法来获取并进行进一步处理的，定义的异步函数中的返回值会当成 resolve 状态来处理，一般用 .then() 方法处理，而如果定义的异步函数抛出错误，例如变量未定义，则会被当做 reject 状态来处理，一般使用.catch()方法来处理， 注意，async 和 await 并不是区别于 Promise 的一套新的逻辑，而是 Promise 的一个语法糖，使得 Promise 的实现变得更为简便和清晰。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 使用 .then() 的情况</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello world!&#x27;</span>;<br>&#125;<br><br><span class="hljs-title function_">fn1</span>().<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>&#125;);<br><span class="hljs-comment">// Hello world!</span><br><br><span class="hljs-comment">// 使用 .catch() 的情况</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(aaa); <span class="hljs-comment">// 这里的变量 aaa 未定义，制造错误</span><br>&#125;<br><br><span class="hljs-title function_">fn2</span>().<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>&#125;);<br><span class="hljs-comment">// aaa is not defined</span><br></code></pre></td></tr></table></figure><p>即定义为async的函数，即可用try…cache…来处理回调，也可以使用 .then来处理回调，因为 async 函数的返回值是一个Promise对象。</p><p><code>await</code>: 是指暂停当前 async 函数内部语句的执行，等待 await 后面的函数和语句执行完毕返回结果后，再继续向下执行 async 函数内剩余的语句。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript">; (<span class="hljs-function">() =&gt;</span> &#123;<br>    fn = <span class="hljs-keyword">async</span> () =&gt; &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123; <span class="hljs-comment">// await 必须返回一个Promise对象</span><br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br>                <span class="hljs-title function_">resolve</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// 如果没有这行，则代码执行到此后不会继续向下执行</span><br>            &#125;,<span class="hljs-number">2000</span>)<br>        &#125;);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);<br>    &#125;;<br>    <span class="hljs-title function_">fn</span>();<br>&#125;)();<br><span class="hljs-comment">// 输出结果为 1 2 3</span><br><br>; (<span class="hljs-function">() =&gt;</span> &#123;<br>    fn = <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br>        &#125;, <span class="hljs-number">3000</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);<br>    &#125;;<br>    <span class="hljs-title function_">fn</span>();<br>&#125;)();<br><span class="hljs-comment">// 输出结果为 1 3 2</span><br></code></pre></td></tr></table></figure><p><code>await</code>用法：await 必须在声明了 async 的函数内部（Promise对象）使用，否则会提示语法错误。如果 await 后面跟的是其他值，则会直接返回该值。</p><p>如果存在多个 await ，await则会按逻辑顺序逐一向下执行，如果想让多个await并发执行，则需使用Promise.all() 来将其组合。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-keyword">const</span> promiseA = <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;...&quot;</span>); <span class="hljs-comment">// fetch 本身返回一个Promise对象</span><br>       <span class="hljs-keyword">const</span> promiseB = <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;...&quot;</span>);<br>       <span class="hljs-keyword">const</span> [a,b] = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([promiseA,promiseB]);<br>   &#125;<br></code></pre></td></tr></table></figure><p>如果需要在循环中执行异步操作，不可以直接调用forEach或者map这类方法，尽管在回调函数中写了await,但这里的forEach会立即返回，并不会等到所有的异步执行函数（someAsyncOperation）都执行完毕。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>   [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>].<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">async</span> (i) =&gt; &#123;<br>       <span class="hljs-keyword">await</span> <span class="hljs-title function_">someAsyncOperation</span>();<br>   &#125;);<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;done&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果想等到所有的异步函数都执行完毕后再返回,则必须使用for循环。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])&#123;<br>       <span class="hljs-keyword">await</span> <span class="hljs-title function_">someAsyncOperation</span>();<br>   &#125;;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;done&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果想让所有的异步操作都并发执行，则可以在for循环前加await。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">const</span> promises = [<br>        <span class="hljs-title function_">someAsyncOperation</span>();<br>        <span class="hljs-title function_">someAsyncOperation</span>();<br>        <span class="hljs-title function_">someAsyncOperation</span>();<br>    ];<br>    <span class="hljs-keyword">for</span> <span class="hljs-keyword">await</span> (<span class="hljs-keyword">let</span> result <span class="hljs-keyword">of</span> promises)&#123;<br><br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;done&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>相较与 Promise 等待执行完毕后再调用 catch 或者 then ，async 和 await 的组合可直接在一个 async 函数内部用 await 来等待异步操作完成后再向下执行。</p><h4 id="三-大文件分割与上传："><a href="#三-大文件分割与上传：" class="headerlink" title="三.大文件分割与上传："></a>三.大文件分割与上传：</h4><p>大文件的分割，我们一般用 file 的 slice() 函数。File 接口本身没有定义任何方法，file 的 slice 是继承自 Blog 接口。</p><p><code>Blob</code> ：表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取。Blob 表示的不一定是  javaScript  原生格式的数据。File 接口基于 Blob ，继承了  blob  的功能并将其扩展使其支持用户系统上的文件。</p><p><code>slice(start,end,contentType)</code> : 该操作会返回一个大文件的数据子集,是一个新的 Blob 对象。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">uploadVideo</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 网络请求（axios）为异步操作</span><br>       <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">files</span>: [file] &#125; = oUploader; <span class="hljs-comment">// 前端接收文件</span><br>       <span class="hljs-keyword">if</span> (!file) &#123; <span class="hljs-comment">// 判断是否为空</span><br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br>       <span class="hljs-keyword">if</span> (!<span class="hljs-variable constant_">ALLOWED_TYPE</span>[file.<span class="hljs-property">type</span>]) &#123; <span class="hljs-comment">// 判断文件类型</span><br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br>       <span class="hljs-keyword">const</span> &#123; name, type, size &#125; = file; <span class="hljs-comment">// 拿去文件必要变量</span><br>       <span class="hljs-keyword">const</span> fileName = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>() + <span class="hljs-string">&quot;_&quot;</span> + name; <span class="hljs-comment">// 重命名文件</span><br>       <span class="hljs-keyword">let</span> uploadedResult = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 清空分割块，为了重复利用</span><br>       <span class="hljs-keyword">while</span> (uploadedSize &lt; size) &#123; <span class="hljs-comment">// size为文件总大小，uploadedSize为已经上传的数据的大小</span><br>           <span class="hljs-keyword">const</span> fileChunk = file.<span class="hljs-title function_">slice</span>(uploadedSize, uploadedSize + <span class="hljs-variable constant_">CHUNK_SIZE</span>); <span class="hljs-comment">// 分割大文件</span><br>           <span class="hljs-keyword">const</span> formData = <span class="hljs-title function_">createFormData</span>(&#123; <span class="hljs-comment">// 标准化数据对象</span><br>               name, type, size, fileName, uploadedSize, <span class="hljs-attr">file</span>: fileChunk<br>           &#125;);<br>           <span class="hljs-keyword">try</span> &#123;<br>               uploadedResult = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">post</span>(<span class="hljs-variable constant_">API</span>.<span class="hljs-property">UPLOAD_VIDEO</span>, formData);  <span class="hljs-comment">// await 等待上传请求结束后再继续向下执行，保证后端按序接收</span><br>           &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>               <span class="hljs-title function_">alert</span>(e.<span class="hljs-property">message</span>)<br>               <span class="hljs-keyword">return</span>;<br>           &#125;<br>           uploadedSize += fileChunk.<span class="hljs-property">size</span>; <span class="hljs-comment">// 更改大文件分割下标，从 已上传的数据大小 开始，到 已上传的数据大小+分片大小 结束</span><br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>coder</category>
      
      <category>全栈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Express</tag>
      
      <tag>自执行函数</tag>
      
      <tag>闭包</tag>
      
      <tag>Promise</tag>
      
      <tag>async</tag>
      
      <tag>await</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>卷积神经网络初步</title>
    <link href="/Marvelous.github.io/2022/06/26/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%88%9D%E6%AD%A5/"/>
    <url>/Marvelous.github.io/2022/06/26/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%88%9D%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<p><strong>CNN</strong>（Convolutional Neural <strong>Network</strong>），即卷积神经网络，是一种在图像等领域应用很广泛的一种网络模型，核心的部分包括卷积（Convolution）和池化（Pooling）。</p><h3 id="一-环境构建："><a href="#一-环境构建：" class="headerlink" title="一.环境构建："></a>一.环境构建：</h3><h5 id="安装CUDA"><a href="#安装CUDA" class="headerlink" title="安装CUDA:"></a>安装CUDA:</h5><p>CUDA为NVIDIA为N卡提供的运算平台，CUDA™是一种由NVIDIA推出的通用<a href="https://baike.baidu.com/item/%E5%B9%B6%E8%A1%8C%E8%AE%A1%E7%AE%97/113443">并行计算</a>架构，该架构使<a href="https://baike.baidu.com/item/GPU">GPU</a>能够解决复杂的计算问题。 它包含了CUDA<a href="https://baike.baidu.com/item/%E6%8C%87%E4%BB%A4%E9%9B%86%E6%9E%B6%E6%9E%84">指令集架构</a>（<a href="https://baike.baidu.com/item/ISA">ISA</a>）以及GPU内部的并行计算引擎。 开发人员可以使用<a href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80">C语言</a>来为CUDA™架构编写程序，所编写出的程序可以在支持CUDA™的处理器上以超高性能运行。CUDA3.0已经开始支持<a href="https://baike.baidu.com/item/C%2B%2B">C++</a>和<a href="https://baike.baidu.com/item/FORTRAN">FORTRAN</a>。</p><p>下载地址：<a href="https://developer.nvidia.com/cuda-downloads?target_os=Windows&amp;target_arch=x86_64&amp;target_version=11&amp;target_type=exe_local">https://developer.nvidia.com/cuda-downloads?target_os=Windows&amp;target_arch=x86_64&amp;target_version=11&amp;target_type=exe_local</a></p><h5 id="Python及组件安装："><a href="#Python及组件安装：" class="headerlink" title="Python及组件安装："></a>Python及组件安装：</h5><p>1.Python</p><p>​安装地址：<a href="https://www.python.org/downloads/release/python-3105/">https://www.python.org/downloads/release/python-3105/</a> （安装步骤略，注意勾选PATH）</p><p>2.Anaconda</p><p>​安装地址：<a href="https://www.anaconda.com/">https://www.anaconda.com/</a></p><p>​安装好后换中国源(命令行中输入)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 换清华源<br>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/<br>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge<br>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/<br>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/<br>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/<br>conda config --set show_channel_urls yes<br><br>// 创建CNN环境<br><br>conda create --name CNN // 创建环境<br>conda activate CNN // 进入环境<br></code></pre></td></tr></table></figure><p>​    创建新环境：conda create –name <env_name> <package_names></p><p>​切换环境：conda activate <env_name></p><p>​查看已有环境：conda env list</p><p>​删除环境： conda remove –name <env_name> –all</p><p>​在当前环境安装包： conda install <package_name>（也可直接使用pip安装）</p><p>3.PyTorch</p><p>​安装地址：<a href="https://pytorch.org/get-started/locally/">https://pytorch.org/get-started/locally/</a>选择对应驱动和CUDA的版本后使用pip安装（也可下载到本地后用 pip install 文件名 安装）</p><p>​注：CUDA版本号可在命令行中输入 NVIDIA-SMI 查看</p><p>4.Keras</p><p>​Keras是基于Tensorflow的，因此需要先安装Tensorflow。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install tensorflow<br>  pip install keras<br></code></pre></td></tr></table></figure><p>​注意：如果提示缺少xxxx.dll文件，则在<a href="https://cn.dll-files.com/">https://cn.dll-files.com/</a> 处下载后放到相应位置。</p><p>5.Matplotlib</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pyth">pip install matplotlib<br></code></pre></td></tr></table></figure><h3 id="二-CNN构成："><a href="#二-CNN构成：" class="headerlink" title="二.CNN构成："></a>二.CNN构成：</h3><p>总的来说，卷积神经网络与神经网络的区别是增加了若干个卷积层，而卷积层又可细分为卷积（CONV）和池化（POOL）两部分操作。然后是全连接层（FC），可与神经网络的隐藏层相对应；最后是softmax层预测输出值。用多个卷积核对图像进行卷积操作，目的是取得多幅图像中共同存有的特征。</p>]]></content>
    
    
    <categories>
      
      <category>coder</category>
      
      <category>人工智能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CNN</tag>
      
      <tag>Python</tag>
      
      <tag>Torch</tag>
      
      <tag>Keras</tag>
      
      <tag>图像识别</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高等数学与经济学初步</title>
    <link href="/Marvelous.github.io/2022/06/24/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8E%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%88%9D%E6%AD%A5/"/>
    <url>/Marvelous.github.io/2022/06/24/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E4%B8%8E%E7%BB%8F%E6%B5%8E%E5%AD%A6%E5%88%9D%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<h3 id="一-线性回归与商品规划"><a href="#一-线性回归与商品规划" class="headerlink" title="一.线性回归与商品规划"></a>一.线性回归与商品规划</h3><img src="https://raw.githubusercontent.com/CherryMars0/blog-img/main/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92.png" /><p>线性回归是在金融数据分析中很基础的机器学习算法，本文将通俗易懂的介绍线性回归的基本概念，优缺点和逻辑回归的比较。</p><h4 id="几个重要的概念："><a href="#几个重要的概念：" class="headerlink" title="几个重要的概念："></a>几个重要的概念：</h4><h5 id="两种数据类型："><a href="#两种数据类型：" class="headerlink" title="两种数据类型："></a>两种数据类型：</h5><p>​1.自变量：可以直接控制的数据。</p><p>​2.因变量：不可以直接控制的数据。即需要预测和估算。</p><h5 id="模型："><a href="#模型：" class="headerlink" title="模型："></a>模型：</h5><p>​模型本质上就是一个转换引擎，主要的作用就是找到自变量和因变量之间的关系函数。</p><h5 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h5><p>​参数是添加到模型中用于输出预测的要素。</p><h4 id="什么是线性回归："><a href="#什么是线性回归：" class="headerlink" title="什么是线性回归："></a>什么是线性回归：</h4><h5 id="什么是回归："><a href="#什么是回归：" class="headerlink" title="什么是回归："></a>什么是回归：</h5><p>回归是一种基于独立预测变量对目标值进行建模的方法。回归的目的主要是用于预测和找出变量之间的因果关系。比如预测明天的天气温度，预测股票的走势。回归之所以能预测是因为它通过历史数据，摸透了”套路”，然后通过这个套路来预测未来的结果。回归技术主要根据自变量的数量以及自变量和因变量之间的关系类型而有所不同。</p><h5 id="什么是线性："><a href="#什么是线性：" class="headerlink" title="什么是线性："></a>什么是线性：</h5><p>数据点排成一条直线（或接近直线），或者沿直线延长。线性意味着，因变量和自变量之间的关系可以用直线表示。例如：</p><p>​「房子」越大，「租金」就越高</p><p>​「金子」买的越多，花的「钱」就越多</p><p>​杯子里的「水」越多，「重量」就越大</p><p>线性关系不仅仅只能存在 2 个变量（二维平面）。3 个变量时（三维空间），线性关系就是一个平面，4 个变量时（四维空间），线性关系就是一个体。</p><h5 id="什么是线性回归：-1"><a href="#什么是线性回归：-1" class="headerlink" title="什么是线性回归："></a>什么是线性回归：</h5><p>线性回归本来是是统计学里的概念，现在经常被用在机器学习中。</p><p>线性回归是利用数理统计中回归分析，来确定两种或两种以上变量间相互依赖的定量关系的一种统计分析方法，运用十分广泛。其表达形式为y &#x3D; w’x+e，e为误差服从均值为0的正态分布。</p><p>回归分析中，只包括一个自变量和一个因变量，且二者的关系可用一条直线近似表示，这种回归分析称为一元线性回归分析。如果回归分析中包括两个或两个以上的自变量，且因变量和自变量之间是线性关系，则称为多元线性回归分析。</p><p>如果 2 个或者多个变量之间存在”线性关系”，那么我们就可以通过历史数据，摸清变量之间的”套路”，建立一个有效的模型，来预测未来的变量结果。</p><h5 id="线性回归优特点："><a href="#线性回归优特点：" class="headerlink" title="线性回归优特点："></a>线性回归优特点：</h5><p>​特点：速度快，可解释性好，不适合非线性。</p><h5 id="线性回归优点："><a href="#线性回归优点：" class="headerlink" title="线性回归优点："></a>线性回归优点：</h5><p>​1.建模速度快，不需要很复杂的数据，在数据量大的情况下依然运行速度很快。</p><p>​2.可以根据系数给出每个变量的解释和理解。</p><h5 id="线性回归缺点："><a href="#线性回归缺点：" class="headerlink" title="线性回归缺点："></a>线性回归缺点：</h5><p>​1.不能很好地拟合非线性数据。所以需要先判断变量之间是否是线性关系。</p><h5 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h5><p>1.线性回归只能用于回归问题，逻辑回归虽然名字叫回归，但是更多用于分类问题。</p><p>2.线性回归要求因变量是连续性数值变量，而逻辑回归要求因变量是离散的变量。</p><p>3.线性回归要求自变量和因变量呈线性关系，而逻辑回归不要求自变量和因变量呈线性关系。</p><p>4.线性回归可以直观的表达自变量和因变量之间的关系，逻辑回归则无法表达变量之间的关系。</p><h4 id="一元线性回归应用："><a href="#一元线性回归应用：" class="headerlink" title="一元线性回归应用："></a>一元线性回归应用：</h4><p>线性回归的前提，是要有足够数据的支撑，虽有一些算法能弥补部分样本数据不够时所带来的问题。</p><p>最简单的线性回归每年都会出现在高考试卷当中：</p><p>例：假设有一个超市过去七天内，每天的平均温度和当天所卖出的冰激凌数量如下表，试求每天温度关于卖出冰激凌的线性回归方程。</p><table><thead><tr><th align="center">X(温度）</th><th align="center">25</th><th align="center">26</th><th align="center">27</th><th align="center">28</th><th align="center">29</th></tr></thead><tbody><tr><td align="center">Y（卖出冰激凌数量）</td><td align="center">10</td><td align="center">15</td><td align="center">17</td><td align="center">23</td><td align="center">25</td></tr></tbody></table><p>$$<br>\bf \bar{x} &#x3D;\frac {\sum_{i&#x3D;1}^n {x_i}}{n}（线性回归方程-1）<br>$$</p><p>$$<br>\bf \bar{y} &#x3D;\frac {\sum_{i&#x3D;1}^n {y_i}}{n}（线性回归方程-2）<br>$$</p><p>$$<br>\bf \hat{b}&#x3D;\frac{\sum_{i&#x3D;1}^n(x_i-\bar{x})(y_i-\bar{y})}{\sum_{i&#x3D;1}^n(x_i-\bar{x})^2}&#x3D;\frac{(x_1-\bar{x})(y_1-\bar{y})+(x_2-\bar{x})(y_2-\bar{y})+(x_3-\bar{x})(y_3-\bar{y})+…}{(x_1-\bar{x})^2+(x_2-\bar{x})^2+…} （线性回归方程-3）<br>$$</p><p>$$<br>\bf \bar{y} &#x3D; \hat{b}\bar{x} + \hat{a}（线性回归方程-4）<br>$$</p><p>$$<br>\bf L(y|f(x)) &#x3D; \frac{1}{n} \sum_{i&#x3D;1}^n(y_i-f(x_i))^2 （线性回归方程 - 5 - MSE(均方误差损失函数)）<br>$$</p><p>$$<br>\bf L(y|f(x)) &#x3D; \sqrt[2]{\frac{1}{n} \sum_{i&#x3D;1}^n(y_i-f(x_i))^2} （线性回归方程 - 6 - L2(欧氏误差函数)）<br>$$</p><p>$$<br>\bf L(y|f(x)) &#x3D; \sum_{i&#x3D;1}^n|y_i-f(x_i)|（线性回归方程 - 7 - L1(曼哈顿误差函数)）<br>$$</p><p>$$<br>\bf L(y|f(x)) &#x3D; \begin{cases}<br> \frac{1}{2}(y-f(x))^2 &amp; |y-f(x)| &lt; 1 \<br> |y-f(x)|-\frac{1}{2} &amp; |y-f(x)| \geq 1<br>\end{cases}（线性回归方程 - 8 - Smooth L1(Girshick损失函数)）<br>$$</p><p>$$<br>\bf L(y|f(x)) &#x3D; \begin{cases}<br> \frac{1}{2}(y-f(x))^2 &amp; |y-f(x)| \leq \delta \<br> \delta|y-f(x)|-\frac{1}{2}\delta^2 &amp; |y-f(x)| &gt; \delta<br>\end{cases}（线性回归方程 - 9 - huber(huber损失函数)）<br>$$</p><p>$$<br>\bf L(y|f(x)) &#x3D; \sum_{i&#x3D;1}^ny_i\times\log(\frac{y_i}{f(x_i)})（线性回归方程 - 10 - KL(散度函数)）<br>$$</p><p>$$<br>\bf L(y|f(x)) &#x3D; - \sum_{i&#x3D;1}^n y_i\log(f(x_i)) （线性回归方程 - 11 - ReLU(交叉熵损失函数)）<br>$$</p><p>$$<br>\bf L(y|f(x)) &#x3D; -\frac{1}{n}\sum_{i&#x3D;1}^n\log(\frac{e^{fy_i}}{\sum_{j&#x3D;1}^ce{f_j}})（线性回归方程 - 12 - softmax(CNN模型损失函数)）<br>$$</p><p><code>第一步</code>：先求出X，Y的平均值：<br>$$<br>\bar{x} &#x3D;\frac {25+26+27+28+29}{5}&#x3D;27（线性回归方程-1）<br>$$</p><p>$$<br>\bar{y} &#x3D;\frac {10+15+17+23+25}{5}&#x3D;18（线性回归方程-2）<br>$$</p><p><code>第二步</code>：求线性回归方程的斜率：<br>$$<br>\hat{b}&#x3D;\frac{(25-27)(10-18)+(26-27)(15-18)+(27-27)(17-18)+(28-27)(23-18)+(29-27)(25-18)}{(25-27)^2+(15-27)^2+(27-27)^2+(28-27)^2+(29-27)^2} &#x3D; 3.8（线性回归方程-3）<br>$$<br><code>第三步</code>：求线性回归方程的截距：<br>$$<br>\hat{a} &#x3D; 18-3.8\times27&#x3D;-84.6（线性回归方程-4）<br>$$<br><code>第四步</code>：求线性回归方程：<br>$$<br>y &#x3D; 3.8x - 84.6（线性回归方程-4）<br>$$<br><img src="https://raw.githubusercontent.com/CherryMars0/blog-img/main/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E2%80%94%E4%BE%8B1.png" /></p><h5 id="神经网络在线性回归中的应用："><a href="#神经网络在线性回归中的应用：" class="headerlink" title="神经网络在线性回归中的应用："></a>神经网络在线性回归中的应用：</h5><h6 id="线性回归的程序实现："><a href="#线性回归的程序实现：" class="headerlink" title="线性回归的程序实现："></a>线性回归的程序实现：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>x = [<span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>] <span class="hljs-comment">#温度</span><br>y = [<span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">17</span>, <span class="hljs-number">23</span>, <span class="hljs-number">25</span>] <span class="hljs-comment">#卖出的数量</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">linearRegression</span>(<span class="hljs-params">x: <span class="hljs-built_in">list</span>, y: <span class="hljs-built_in">list</span></span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Average</span>(<span class="hljs-params">x: <span class="hljs-built_in">list</span>, y: <span class="hljs-built_in">list</span></span>): <span class="hljs-comment">#求平均</span><br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">sum</span>(x)/<span class="hljs-built_in">len</span>(x), <span class="hljs-built_in">sum</span>(y)/<span class="hljs-built_in">len</span>(y))<br>    x_bar, y_bar = Average(x, y)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">slope</span>(<span class="hljs-params">x: <span class="hljs-built_in">list</span>, y: <span class="hljs-built_in">list</span>, x_bar, y_bar</span>): <span class="hljs-comment">#求斜率</span><br>        j = <span class="hljs-number">0</span><br>        k = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(x, y):<br>            j += (x-x_bar)*(y-y_bar)<br>            k += (x-x_bar)*(x-x_bar)<br>        <span class="hljs-keyword">return</span>(j/k)<br>    b_hat = slope(x, y, x_bar, y_bar)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">intercept</span>(<span class="hljs-params">x_bar, y_bar, b_hat</span>): <span class="hljs-comment">#求截距</span><br>        <span class="hljs-keyword">return</span> (y_bar-b_hat*x_bar)<br>    a_hat = intercept(x_bar, y_bar, b_hat)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x_bar:&quot;</span>, x_bar, <span class="hljs-string">&quot;y_bar:&quot;</span>, y_bar)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a_hat:&quot;</span>, a_hat, <span class="hljs-string">&quot;b_hat:&quot;</span>, b_hat)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">showRegression</span>(<span class="hljs-params">a_hat, b_hat, x: <span class="hljs-built_in">list</span>, y: <span class="hljs-built_in">list</span></span>): <span class="hljs-comment">#画图</span><br>        plt.figure(figsize=(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>), dpi=<span class="hljs-number">100</span>)<br>        X = np.linspace(<span class="hljs-built_in">max</span>(x), <span class="hljs-built_in">min</span>(x), <span class="hljs-number">1000</span>)<br>        Y = b_hat * X + a_hat<br>        plt.plot(X, Y, color=<span class="hljs-string">&#x27;red&#x27;</span>, linestyle=<span class="hljs-string">&quot;--&quot;</span>,<br>                label=(<span class="hljs-string">&quot;y=&#123;&#125;x&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(b_hat, a_hat)))<br>        plt.scatter(x, y, color=<span class="hljs-string">&#x27;black&#x27;</span>, label=<span class="hljs-string">&quot;real&quot;</span>)<br>        plt.legend(loc=<span class="hljs-string">&quot;best&quot;</span>)<br>        plt.show()<br>    showRegression(a_hat, b_hat, x, y)<br>    <br>linearRegression(x, y)<br><br>执行结果：<br>x_bar: <span class="hljs-number">27.0</span>   y_bar: <span class="hljs-number">18.0</span><br>a_hat: -<span class="hljs-number">84.6</span>  b_hat: <span class="hljs-number">3.8</span><br>MSEloss: <span class="hljs-number">0.72</span><br></code></pre></td></tr></table></figure><h3 id="二-导数与商品边际效应"><a href="#二-导数与商品边际效应" class="headerlink" title="二.导数与商品边际效应"></a>二.导数与商品边际效应</h3><h4 id="几个重要概念："><a href="#几个重要概念：" class="headerlink" title="几个重要概念："></a>几个重要概念：</h4><p><code>边际利润</code>:边际利润是指每增加一单位产品所增加的利润。</p><p>​现有一单成本函数：即生产 x 单位产品需要 y 的成本，则其函数的边际利润就是其单成本函数的导数。</p><p><code>边际成本</code>:边际成本是指每增加一单位产品所增加的总成本。</p><p>​现有一总成本导数：即生产 x 单位产品需要 y 的总成本，则其函数的边际成本就是其总成本函数的导数。</p><p><code>边际收入</code>:边际收入指是每增加一单位产品所增加的收入额。</p><p>​现有一总收入导数：即生产 x 单位产品会产出 y 的总收入，则其函数的边际收入就是其总收入函数的导数。</p><p><code>利润最大化</code>：边际收益等于边际成本时利润最大化。</p><p>有了上述概念以后，我们就可以根据每个概念中的自变量和应变量收集数据然后来拟合出三种回归函数（单成本函数，总成本函数，总收入函数），进而定量的分析整个商品的走向。</p><p>在第一节中，简单的介绍了线性回归和一个关于线性回归最简单的实际问题，而实际问题往往并没有那么简单，如例2：</p><h3 id="三-回归函数与商品定价"><a href="#三-回归函数与商品定价" class="headerlink" title="三.回归函数与商品定价"></a>三.回归函数与商品定价</h3>]]></content>
    
    
    <categories>
      
      <category>math</category>
      
      <category>经济学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>高等数学</tag>
      
      <tag>经济学</tag>
      
      <tag>导数与微积分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构之六个常见算法</title>
    <link href="/Marvelous.github.io/2022/06/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%85%AD%E4%B8%AA%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/"/>
    <url>/Marvelous.github.io/2022/06/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%85%AD%E4%B8%AA%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>注：世间万物并非都可以用算法来解决，算法也有其<font color=red>可行性</font>、<font color=red>有限性</font>、<font color=red>确定性</font>、<font color=red>可行性</font>且<font color=red>必须有输入输出</font>的限制。故算法只是解决有限问题的一种方法论（手段），而不是解决无限问题的指导。进而我们讨论的所有算法问题，都是有限且明晰的实际问题。</p><h4 id="一-分治法："><a href="#一-分治法：" class="headerlink" title="一.分治法："></a>一.分治法：</h4><p>分治法顾名思义，就是将<font color=red>一个难以直接解决的问题</font><font color=green>拆分成</font><font color=blue>一些规模较小，可以直接解决的问题</font>，然后分而治之，逐个击破。最后再将拆分的结果合并成整个问题的解。</p><h5 id="适用条件："><a href="#适用条件：" class="headerlink" title="适用条件："></a>适用条件：</h5><p>​1.该问题分割到一定程度就可以轻松解决。</p><p>​2.该问题分割后产生的子问题的解可以合并为该问题的解。</p><p>​3.该问题可以分割成若干个规模较小且原理相同的问题（即该问题具有最优子结构）。</p><p>​4.该问题分隔后的子问题相互独立（即该问题不包含公共子结构）。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tex">条件2是整个分治法的关键，如果拆分后问题的解无法合并，那么分治可能将毫无意义。<br>如果在具备条件2的情况下，具备条件1，则考虑使用分治法。<br>如果具备条件1和条件3，但不具备条件2，则考虑使用贪心法或动态规划法。<br>条件3和条件4决定了动态规划的效率，如果问题包含公共子结构，一般就使用动态规划法。反之则考虑使用贪心法。<br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/CherryMars0/blog-img/main/%E5%88%86%E6%B2%BB%E6%B3%95%E9%80%82%E7%94%A8%E6%9D%A1%E4%BB%B6.png" /><h5 id="算法流程："><a href="#算法流程：" class="headerlink" title="算法流程："></a>算法流程：</h5><p>分治法一般还是使用递归的方式来实现逻辑，每一次递归称为一个递归分支，每个分支上有三个步骤：</p><p>​1.分解：将原问题分解为若干规模较小、相互独立、与原问题形式相同的子问题。</p><p>​2.解决：若子问题规模较小且容易解决则直接解决，否则继续递归分解问题。</p><p>​3.合并：将各个递归分支分解的问题合并为原问题的解。</p><h5 id="分解前提："><a href="#分解前提：" class="headerlink" title="分解前提："></a>分解前提：</h5><p>解决问题的前提是分析问题，问题得到充分的分析与解构之后，才能运用算法来准确的得到问题的解。</p><p>​1.一定先找到最小结构的最优解。</p><p>​2.考虑随着结构越来越大时的最优解。</p><p>​3.设计出问题的解决模型，再设计递归程序。</p><h5 id="应用实例："><a href="#应用实例：" class="headerlink" title="应用实例："></a>应用实例：</h5><p>分治法应用的典型：归并排序、二分查找</p><h6 id="归并排序："><a href="#归并排序：" class="headerlink" title="归并排序："></a>归并排序：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] mergeSort(<span class="hljs-type">int</span>[] arr)&#123;<br>    <span class="hljs-keyword">if</span>(arr.length &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> arr;<br>    <span class="hljs-comment">//拆为两份 一份最少为1个数据</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> arr.length/<span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span>[] left = Arrays.copyOfRange(arr,<span class="hljs-number">0</span>,mid);<span class="hljs-comment">//使用Arrays.copyOfRange()复制数组</span><br>    <span class="hljs-type">int</span>[] right = Arrays.copyOfRange(arr,mid,arr.length);<br>    <span class="hljs-comment">//分解+合并</span><br>    <span class="hljs-keyword">return</span> merge(mergeSort(left),mergeSort(right));<span class="hljs-comment">//分解为左 右实现</span><br>&#125;<br><span class="hljs-comment">//合并 双指针很巧妙</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] merge(<span class="hljs-type">int</span>[] left ,<span class="hljs-type">int</span>[] right)&#123;<br>    <span class="hljs-comment">//新数组</span><br>    <span class="hljs-type">int</span>[] newArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[left.length + right.length];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,r = <span class="hljs-number">0</span>;<span class="hljs-comment">//分别代表left和right数组的指针</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; newArr.length; i++) &#123;<br>        <span class="hljs-keyword">if</span>(l &gt;= left.length) newArr[i] = right[r++];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(r &gt;= right.length) newArr[i] = left[l++];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(left[l] &lt; right[r]) newArr[i] = left[l++];<span class="hljs-comment">//升序</span><br>        <span class="hljs-keyword">else</span> newArr[i] = right[r++];<br>    &#125;<br>    <span class="hljs-keyword">return</span> newArr;<br>&#125;<br><br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/CherryMars0/blog-img/main/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.png" /><p>归并排序就是一种子结构可合并，且子结构容易解决的排序问题。</p><p>最小结构的解决方法就是比较拆分至最简结构后数组两个元素的大小。随着结构越来越大，可将排序好的数组进行合并。故可用递归的方式，将数组拆分为单个数字，然后比较大小，最后再将比较换位后的数字合并为数组。即可用归并和递归的方式解决排序的问题。</p><h6 id="二分查找："><a href="#二分查找：" class="headerlink" title="二分查找："></a>二分查找：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr,<span class="hljs-type">int</span> start,<span class="hljs-type">int</span> end,<span class="hljs-type">int</span> entry)</span>&#123;<br>    <span class="hljs-comment">//可行性判断 判断数组是否可继续一分为二</span><br>    <span class="hljs-keyword">if</span>(start &gt; end) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> start + (end - start) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(arr[mid] == entry) <span class="hljs-keyword">return</span> mid;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[mid] &gt; entry)<br>        <span class="hljs-keyword">return</span> binarySearch(arr,start,mid-<span class="hljs-number">1</span>,entry);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> binarySearch(arr,mid+<span class="hljs-number">1</span>,end,entry);<br>&#125;<br></code></pre></td></tr></table></figure><p>而二分查找也是一种子结构可合并，且子结构也容易解决的问题。</p><p>二分查找一般应用于有序的队列（数组），对一个数组进行排序后，不断对数组一分为二，然后判断二分点上的元素是否是目标元素，直至找出目标元素。如果最终不能再进行二分的数组中没有目标元素，则这个目标元素不存在与原数组之中。可见二分查找典型体现了分治和递归的概念。</p><img src="https://raw.githubusercontent.com/CherryMars0/blog-img/main/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.png" /><h4 id="二-递归法："><a href="#二-递归法：" class="headerlink" title="二.递归法："></a>二.递归法：</h4><p>递归的本质就是<font color=red>函数自身调用</font>，而递归又分为直接递归和间接递归。分治和递归是就是一对孪生兄弟。都将是一个复杂的算法问题进行分解，让规模越来越小，最终使子问题容易求解。</p><p>一个标准的递归需要<font color=red>两个条件</font>：</p><p>​1.一个可以反复执行的递归过程。</p><p>​2.至少一个跳出执行过程的出口。</p><p>递归其实是对for循环的另一种表达，一切递归都可以用一个等价for循环来完成。但是递归并不完全等于for循环，例如使用无限递归会导致内存崩溃超过最大递归深度。一般语言中，每次函数调用都会在栈上保存返回地址，分配局部变量等。所以递归这种连续嵌套的函数调用就比较消耗内存，而循环不存在这些问题。而具有<font color=red>尾递归优化</font>的语言能够避免这种内存消耗。</p><p><font color=blue>尾递归：</font>就是函数或子程序的最后一条语句为递归调用。因为每次调用后，再回到前一次调用的第一条语句就是return语句，所以不需要再进行任何运算工作了。</p><h5 id="两种递归方式："><a href="#两种递归方式：" class="headerlink" title="两种递归方式："></a>两种递归方式：</h5><img src="https://raw.githubusercontent.com/CherryMars0/blog-img/main/%E4%B8%A4%E7%A7%8D%E9%80%92%E5%BD%92%E6%96%B9%E5%BC%8F.png" /><h5 id="基本思路："><a href="#基本思路：" class="headerlink" title="基本思路："></a>基本思路：</h5><p>​将问题整个拆分成所有子结构完全相同的子问题，然后使用递归逐渐逼近问题的解，是一个积累的过程。</p><h5 id="递归应用："><a href="#递归应用：" class="headerlink" title="递归应用："></a>递归应用：</h5><p>1.阶乘：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">Fac</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        System.out.printf(<span class="hljs-string">&quot;5!=&quot;</span> + Factorial(<span class="hljs-number">5</span>));<br>    &#125;<br>    <span class="hljs-keyword">public</span> ststic <span class="hljs-type">int</span> <span class="hljs-title function_">Factorial</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> n*Factorial(n-<span class="hljs-number">1</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.斐波那契数列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fibonacciSequence</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>        <span class="hljs-keyword">if</span>(i &lt;= <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> fibonacciSequence(i-<span class="hljs-number">1</span>)+fibonacciSequence(i-<span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;请输入要计算第多少位数字:&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; next; i++) &#123;<br>            System.out.println(fibonacciSequence(i));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="三-贪心法："><a href="#三-贪心法：" class="headerlink" title="三.贪心法："></a>三.贪心法：</h4><p>贪心法又称贪婪算法，方法是从某一点开始，在每一个解决问题步骤中使用贪心原则，即采取当下状态最有利或最优化的选择，<font color=red>不断地改进该算法，持续在每一步中选择最佳的方法，</font>并且逐步逼近给定的目标，当达到某一步不能再继续前进时，算法就停止，就是尽可能快的求得更好的解。贪心法经常用于求解图的最小生成树，最短路径与哈夫曼编码等。</p><h5 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路:"></a>基本思路:</h5><p>1.建立数学模型来描述问题。</p><p>2.把求解的问题分成若干个子问题。</p><p>3.对每一子问题求解，得到子问题的局部最优解。</p><p>4.把子问题的局部最优解合成原来的问题的一个解。</p><h5 id="最优子结构性质"><a href="#最优子结构性质" class="headerlink" title="最优子结构性质:"></a>最优子结构性质:</h5><p>当一个问题的最优解包含其子问题的最优解时，称此问题具有最优子结构性质。问题的最优子结构性质是该问题可用贪心算法求解的关键特征。</p><h5 id="算法流程：-1"><a href="#算法流程：-1" class="headerlink" title="算法流程："></a>算法流程：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Greedy(C)&#123;  <span class="hljs-comment">//C是问题的输入集合即候选集合</span><br>    S=&#123; &#125;;  <span class="hljs-comment">//初始解集合为空集</span><br>    <span class="hljs-keyword">while</span> (not <span class="hljs-title function_">solution</span><span class="hljs-params">(S)</span>)&#123;  <span class="hljs-comment">//集合S没有构成问题的一个解</span><br>       x=select(C);    <span class="hljs-comment">//在候选集合C中做贪心选择</span><br>       <span class="hljs-keyword">if</span> <span class="hljs-title function_">feasible</span><span class="hljs-params">(S, x)</span>  <span class="hljs-comment">//判断集合S中加入x后的解是否可行</span><br>          S=S+&#123;x&#125;;<br>          C=C-&#123;x&#125;;<br>    &#125;<br>   <span class="hljs-keyword">return</span> S;<br>&#125;<br> <span class="hljs-comment">// 注意：贪心算法不一定是整体的最优解。使用贪心算法是前提是：局本部最优策略能导致产生全局最优解。</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>coder</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaDataStruct</tag>
      
      <tag>六大算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MVC与Express的耦合</title>
    <link href="/Marvelous.github.io/2022/06/22/MVC%E4%B8%8EExpress%E7%9A%84%E8%80%A6%E5%90%88/"/>
    <url>/Marvelous.github.io/2022/06/22/MVC%E4%B8%8EExpress%E7%9A%84%E8%80%A6%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="1-MVC模型在Express中适用性的探究"><a href="#1-MVC模型在Express中适用性的探究" class="headerlink" title="1.MVC模型在Express中适用性的探究"></a>1.MVC模型在Express中适用性的探究</h1><svg id="SvgjsSvg1114" width="707.4375" height="460.578125" xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs">    <defs id="SvgjsDefs1115">        <marker id="SvgjsMarker1148" markerWidth="14" markerHeight="10" refX="10" refY="5" viewBox="0 0 14 10" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0">            <path id="SvgjsPath1149" d="M0,0 L14,5 L0,10 L0,0" fill="#323232" stroke="#323232" stroke-width="1"></path>        </marker>        <marker id="SvgjsMarker1152" markerWidth="14" markerHeight="10" refX="10" refY="5" viewBox="0 0 14 10" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0">            <path id="SvgjsPath1153" d="M0,0 L14,5 L0,10 L0,0" fill="#323232" stroke="#323232" stroke-width="1"></path>        </marker>        <marker id="SvgjsMarker1156" markerWidth="14" markerHeight="10" refX="10" refY="5" viewBox="0 0 14 10" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0">            <path id="SvgjsPath1157" d="M0,0 L14,5 L0,10 L0,0" fill="#323232" stroke="#323232" stroke-width="1"></path>        </marker>        <marker id="SvgjsMarker1160" markerWidth="14" markerHeight="10" refX="10" refY="5" viewBox="0 0 14 10" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0">            <path id="SvgjsPath1161" d="M0,0 L14,5 L0,10 L0,0" fill="#323232" stroke="#323232" stroke-width="1"></path>        </marker>        <marker id="SvgjsMarker1170" markerWidth="14" markerHeight="10" refX="10" refY="5" viewBox="0 0 14 10" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0">            <path id="SvgjsPath1171" d="M0,0 L14,5 L0,10 L0,0" fill="#323232" stroke="#323232" stroke-width="1"></path>        </marker>        <marker id="SvgjsMarker1180" markerWidth="14" markerHeight="10" refX="10" refY="5" viewBox="0 0 14 10" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0">            <path id="SvgjsPath1181" d="M0,0 L14,5 L0,10 L0,0" fill="#323232" stroke="#323232" stroke-width="1"></path>        </marker>        <marker id="SvgjsMarker1184" markerWidth="14" markerHeight="10" refX="10" refY="5" viewBox="0 0 14 10" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0">            <path id="SvgjsPath1185" d="M0,0 L14,5 L0,10 L0,0" fill="#323232" stroke="#323232" stroke-width="1"></path>        </marker>    </defs>    <g id="SvgjsG1116" transform="translate(25.008928571428555,213.29464285714295)">        <path id="SvgjsPath1117" d="M 0 0L 100 0L 100 70L 0 70Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path>        <g id="SvgjsG1118">            <text id="SvgjsText1119" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="80px" fill="#323232" font-weight="400" align="middle" lineHeight="125%" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="24.375" transform="rotate(0)">                <tspan id="SvgjsTspan1120" dy="16" x="50">                    <tspan id="SvgjsTspan1121" style="text-decoration:;">Application</tspan>                </tspan>            </text>        </g>    </g>    <g id="SvgjsG1122" transform="translate(424.3422619047618,25.0089285714284)">        <path id="SvgjsPath1123" d="M 0 0L 100 0L 100 70L 0 70Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path>        <g id="SvgjsG1124">            <text id="SvgjsText1125" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="80px" fill="#323232" font-weight="400" align="middle" lineHeight="125%" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="24.375" transform="rotate(0)">                <tspan id="SvgjsTspan1126" dy="16" x="50">                    <tspan id="SvgjsTspan1127" style="text-decoration:;">View</tspan>                </tspan>            </text>        </g>    </g>    <g id="SvgjsG1128" transform="translate(173.58035714285575,208.29464285714295)">        <path id="SvgjsPath1129" d="M 0 40L 60 0L 120 40L 60 80Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path>        <g id="SvgjsG1130">            <text id="SvgjsText1131" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="100px" fill="#323232" font-weight="400" align="middle" lineHeight="125%" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="29.775" transform="rotate(0)">                <tspan id="SvgjsTspan1132" dy="16" x="60">                    <tspan id="SvgjsTspan1133" style="text-decoration:;">MVC</tspan>                </tspan>            </text>        </g>    </g>    <g id="SvgjsG1134" transform="translate(424.34226190476176,130.6279761904764)">        <path id="SvgjsPath1135" d="M 0 0L 100 0L 100 70L 0 70Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path>        <g id="SvgjsG1136">            <text id="SvgjsText1137" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="80px" fill="#323232" font-weight="400" align="middle" lineHeight="125%" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="24.375" transform="rotate(0)">                <tspan id="SvgjsTspan1138" dy="16" x="50">                    <tspan id="SvgjsTspan1139" style="text-decoration:;">Model</tspan>                </tspan>            </text>        </g>    </g>    <g id="SvgjsG1140" transform="translate(424.3422619047618,365.5803571428582)">        <path id="SvgjsPath1141" d="M 0 0L 100 0L 100 70L 0 70Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path>        <g id="SvgjsG1142">            <text id="SvgjsText1143" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="80px" fill="#323232" font-weight="400" align="middle" lineHeight="125%" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="24.375" transform="rotate(0)">                <tspan id="SvgjsTspan1144" dy="16" x="50">                    <tspan id="SvgjsTspan1145" style="text-decoration:;">Controller</tspan>                </tspan>            </text>        </g>    </g>    <g id="SvgjsG1146">        <path id="SvgjsPath1147" d="M126.00892857142827 248.29464285714295L149.294642857142 248.29464285714295L149.294642857142 248.29464285714295L169.98035714285575 248.29464285714295" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1148)"></path>    </g>    <g id="SvgjsG1150">        <path id="SvgjsPath1151" d="M262.1852379325107 226.67459272327656L262.1852379325107 60.00892857142833L420.7422619047618 60.00892857142833" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1152)"></path>    </g>    <g id="SvgjsG1154">        <path id="SvgjsPath1155" d="M294.58035714285575 248.29464285714295L358.9613095238087 248.29464285714295L358.9613095238087 165.62797619047663L420.74226190476173 165.62797619047663" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1156)"></path>    </g>    <g id="SvgjsG1158">        <path id="SvgjsPath1159" d="M261.3884490424327 269.89139863714064L261.3884490424327 400.5803571428582L420.7422619047618 400.5803571428582" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1160)"></path>    </g>    <g id="SvgjsG1162" transform="translate(582.4374999999999,171.6279761904773)">        <path id="SvgjsPath1163" d="M 0 0L 100 0L 100 70L 0 70Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path>        <g id="SvgjsG1164">            <text id="SvgjsText1165" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="80px" fill="#323232" font-weight="400" align="middle" lineHeight="125%" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="24.375" transform="rotate(0)">                <tspan id="SvgjsTspan1166" dy="16" x="50">                    <tspan id="SvgjsTspan1167" style="text-decoration:;">Dao</tspan>                </tspan>            </text>        </g>    </g>    <g id="SvgjsG1168">        <path id="SvgjsPath1169" d="M525.3422619047615 165.6279761904764L553.3898809523807 165.6279761904764L553.3898809523807 206.6279761904771L578.8374999999999 206.6279761904771" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1170)"></path>    </g>    <g id="SvgjsG1172" transform="translate(582.4374999999999,82.34226190476173)">        <path id="SvgjsPath1173" d="M 0 0L 100 0L 100 70L 0 70Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path>        <g id="SvgjsG1174">            <text id="SvgjsText1175" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="80px" fill="#323232" font-weight="400" align="middle" lineHeight="125%" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="24.375" transform="rotate(0)">                <tspan id="SvgjsTspan1176" dy="16" x="50">                    <tspan id="SvgjsTspan1177" style="text-decoration:;">Pojo</tspan>                </tspan>            </text>        </g>    </g>    <g id="SvgjsG1178">        <path id="SvgjsPath1179" d="M525.3422619047615 165.6279761904764L553.3898809523807 165.6279761904764L553.3898809523807 117.3422619047621L578.8374999999999 117.3422619047621" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1180)"></path>    </g>    <g id="SvgjsG1182">        <path id="SvgjsPath1183" d="M294.58035714285575 248.29464285714295L358.9613095238088 248.29464285714295L358.9613095238088 294.1041666666667L420.7422619047618 294.1041666666667" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1184)"></path>    </g>    <g id="SvgjsG1186" transform="translate(424.3422619047618,259.1041666666667)">        <path id="SvgjsPath1187" d="M 0 0L 100 0L 100 70L 0 70Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path>        <g id="SvgjsG1188">            <text id="SvgjsText1189" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="80px" fill="#323232" font-weight="400" align="middle" lineHeight="125%" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="24.375" transform="rotate(0)">                <tspan id="SvgjsTspan1190" dy="16" x="50">                    <tspan id="SvgjsTspan1191" style="text-decoration:;">Service</tspan>                </tspan>            </text>        </g>    </g></svg><br /><p>在传统Java后端中，我们一般使用MVC模型来开发所需的业务逻辑，传统MVC再附加Spring的IOC和AOP特性，使得Java后端开发更为简洁和高效。同样的我们也可以将这种程序开发的思路迁移到NodeJS当中去，让一些基于NodeJS的小型web应用的开发变得更为清晰和易于维护。<font color="red"><u>请注意这不是一种新的框架，而是将MVC开发模式向Node的适配与改进。</u></font></p><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><p>​1.结构清晰，维护简便。</p><p>​2.明确分工，可持续增加业务。</p><p>​3.一站式开发，对环境的要求更低。</p><p>​4.基于ES6，代码简单。</p><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><p>​1.步骤繁琐，非开箱即用。</p><p>​2.对开发人员的业务能力有更高的要求。</p><h1 id="2-准备开发环境"><a href="#2-准备开发环境" class="headerlink" title="2.准备开发环境"></a>2.准备开发环境</h1><p>使用的包管理器基于 <font color="green"><u>yarn</u></font> ，JS语法基于 <font color="green"><u>ES6</u></font> 。</p><h5 id="初始化一个新项目"><a href="#初始化一个新项目" class="headerlink" title="初始化一个新项目"></a>初始化一个新项目</h5>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yarn init<br></code></pre></td></tr></table></figure><h5 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">yarn add express<br>yarn add bable-cli<br>yarn add nodemon<br>yarn add babel-preset-es2015 babel-preset-stage-2<br>yarn add babel-register<br></code></pre></td></tr></table></figure><h5 id="配置-yarn-启动项"><a href="#配置-yarn-启动项" class="headerlink" title="配置 yarn 启动项"></a>配置 yarn 启动项</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 在 package.json 里添加运行的脚本</span><br><br><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nodemon Application.js --exec babel-node --presets es2015,stage-2&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs she">yarn start<br></code></pre></td></tr></table></figure><h1 id="3-准备生产环境"><a href="#3-准备生产环境" class="headerlink" title="3.准备生产环境"></a>3.准备生产环境</h1><p>首先将入口文件移动到 <font color="green"><u>lib</u></font> 文件夹下,再配置yarn启动项。</p><h5 id="配置-yarn-启动项-1"><a href="#配置-yarn-启动项-1" class="headerlink" title="配置 yarn 启动项"></a>配置 yarn 启动项</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nodemon lib/Application.js --exec babel-node&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;babel lib -d dist&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;serve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node dist/Application.js&quot;</span><span class="hljs-punctuation">,</span> <br><span class="hljs-punctuation">&#125;</span><br><br>yarn start <span class="hljs-comment">// 开发环境启动</span><br>yarn build <span class="hljs-comment">// 编译生产环境</span><br>tarn serve <span class="hljs-comment">// 在生产环境启动</span><br></code></pre></td></tr></table></figure><h5 id="把babel选项保存到配置文件（-Babelrc）中"><a href="#把babel选项保存到配置文件（-Babelrc）中" class="headerlink" title="把babel选项保存到配置文件（.Babelrc）中"></a>把babel选项保存到配置文件（.Babelrc）中</h5><p>在根目录下创建一个 .babelrc 文件，然后添加如下配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;presets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;es2015&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;stage-2&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;plugins&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="4-demo-预览"><a href="#4-demo-预览" class="headerlink" title="4.demo 预览"></a>4.demo 预览</h1><p>项目demo发布在github中：<a href="https://github.com/CherryMars0/Express-MVC.git">https://github.com/CherryMars0/Express-MVC.git</a></p><h1 id="5-展望"><a href="#5-展望" class="headerlink" title="5.展望"></a>5.展望</h1><p>1.继承Spring的IOC和AOP开发优点。</p><p>2.针对NodeJS进行高并发大容量的优化。</p><p>3.统筹轻量型web应用程序一站式快捷开发方式。</p><p>4.约束系统。</p>]]></content>
    
    
    <categories>
      
      <category>coder</category>
      
      <category>全栈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MVC</tag>
      
      <tag>NodeJS</tag>
      
      <tag>Express</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构总览</title>
    <link href="/Marvelous.github.io/2022/06/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%BB%E8%A7%88/"/>
    <url>/Marvelous.github.io/2022/06/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%BB%E8%A7%88/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h1><p><strong>1.数据结构：</strong>数据结构是<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA/140338">计算机</a>存储、组织<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE">数据</a>的方式。数据结构是指相互之间存在一种或多种特定关系的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%85%83%E7%B4%A0/715313">数据元素</a>的集合。通常情况下，精心选择的数据结构可以带来更高的运行或者存储<a href="https://baike.baidu.com/item/%E6%95%88%E7%8E%87/868847">效率</a>。数据结构往往同高效的检索<a href="https://baike.baidu.com/item/%E7%AE%97%E6%B3%95/209025">算法</a>和<a href="https://baike.baidu.com/item/%E7%B4%A2%E5%BC%95/5716853">索引</a>技术有关。</p><p><strong>2.算法：</strong>算法（Algorithm）是指解题方案的准确而完整的描述，是一系列解决问题的清晰<a href="https://baike.baidu.com/item/%E6%8C%87%E4%BB%A4/3225201">指令</a>，算法代表着用系统的方法描述解决问题的策略机制。也就是说，能够对一定规范的<a href="https://baike.baidu.com/item/%E8%BE%93%E5%85%A5/32696">输入</a>，在有限时间内获得所要求的输出。如果一个算法有缺陷，或不适合于某个问题，执行这个算法将不会解决这个问题。不同的算法可能用不同的时间，空间或效率来完成同样的任务。一个算法的优劣可以用<a href="https://baike.baidu.com/item/%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/9664257">空间复杂度</a>与<a href="https://baike.baidu.com/item/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/1894057">时间复杂度</a>来衡量。</p><p><strong>3.算法效能分析：</strong></p><img src="https://raw.githubusercontent.com/CherryMars0/blog-img/main/%E7%AE%97%E6%B3%95%E6%95%88%E8%83%BD.png" ><p><strong>4.算法：</strong></p><img src="https://raw.githubusercontent.com/CherryMars0/blog-img/main/%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95.png" ><p><strong>5.程序设计：</strong></p><img src="https://raw.githubusercontent.com/CherryMars0/blog-img/main/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%90%91.png" ><p><strong>6.数据结构：</strong></p><img src="https://raw.githubusercontent.com/CherryMars0/blog-img/main/%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" ><p><strong>7.排序和查找</strong></p>]]></content>
    
    
    <categories>
      
      <category>coder</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JavaDataStruct</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>布局与盒模型</title>
    <link href="/Marvelous.github.io/2022/06/17/%E5%B8%83%E5%B1%80%E4%B8%8E%E7%9B%92%E6%A8%A1%E5%9E%8B/"/>
    <url>/Marvelous.github.io/2022/06/17/%E5%B8%83%E5%B1%80%E4%B8%8E%E7%9B%92%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Flex布局："><a href="#Flex布局：" class="headerlink" title="Flex布局："></a>Flex布局：</h1><pre><code class="hljs">1.适用范围：            * 任何一种元素都可以指定为flex布局            * 格式 display:flex;2.注意事项：            * 如果是webkit内核的浏览器，需要加上-webkit-前缀            * 在父级元素设置flex后，子元素的 float,clear,vertical-align 属性都将会失效，所以在使用flex布局时，不应该先写好子元素后再使用flex3.容器和项目：            * 采用flex布局的父元素叫做容器            * 在flex布局里的子元素叫做项目4.项目在容器中的显示：                            #容器中有主轴和交叉轴#            * 在容器中默认有水平的主轴(X轴)和垂直的交叉轴(侧轴,Y轴)，项目在容器中默认沿主轴排列5.容器（父元素）的属性和参数：                属性   参数        * flex-direction        row | row-reverse | column | column-reverse                                        flex-direction:定义了容器主轴的方向，项目在主轴上的对齐方式                                    * row:默认值，表示沿水平方向，由左到右                                    * row-reverse:沿水平方向，由右到左                                    * column:沿垂直方向，由上到下                                    * column-reverse:表示垂直方向，由下到上        * flex-wrapnowrap | wrap | wrap-reverse                                        flex-wrap:定义了当项目在容器中一行无法显示的时候如何处理                                    * nowrap:不换行，强制在一行显示。此时项目的宽度就失效                                    * wrap:正常换行，从左至右，从上到下排列。                                    * wrap-reverse:行反转，从左至右，从下到上排列        * flew-flowflex-deriction,flex-wrap                           flew-flow:是flex-direction和flex-wrap的组合。                               * 第一个参数为flex-direction的参数                                    * 第二个参数为flex-wrap的参数        * justify-contentflex-start | flex-end | center | space-between | space-around                                  justify-content:定义了项目在容器中的对齐方式                                    * flex-start:默认值，左对齐                                    * flex-end:右对齐                                    * center:居中对齐                                    * space-between:两端对齐                                    * space-around:每个项目两侧的间距相等                                        * align-itemsflex-start | flex-end | center | baseline | strecth                                align-items:定义了当flex容器在侧轴上有多余的空间时，将子项作为一个整体进行对齐（只适用于单行）                                    * flex-start:交叉轴的起点对齐                                    * flex-end:交叉轴的终点对齐                                    * center:交叉轴居中对齐                                    * baseline:项目第一行的文字的基线对齐                                    * strecth:默认值，如果项目未设置高度或者高度为auto，项目将会占满整个容器的高度        * align-contentflex-start | flex-end | center | baseline | strecth                                align-contect:定义了项目在每个flex行的侧轴上的对齐方式（适用单行和多行）        * align-item与align-content的区别:            1.align-item 属性时针对单独的每一个flex子项起作用，它的基本单位是每一个子项，在所有情况下都有效果（也与具体的属性值有关）            2.align-content 属性是将flex子项作为一个整体起作用，它的基本单位是子项构成的每一个行，只在两种情况下有效果：                1.子项多行且flex容器高度固定                2.子项单行，flex容器高度固定且设定了 flex-wrap:wrap                6.项目的属性和参数                属性   参数              * order&lt;Integer&gt;             order:设置项目排序的位置，默认为0，数值越小越靠前                                    * &lt;Integer&gt;:排序的数值             * flex-grow&lt;Integer&gt;                                flex-grow:控制当前项目是否放大显示                                    * &lt;Integer&gt;:0 表示即时容器有剩余空间也不放大显示                                    * &lt;Integer&gt;:1 表示平均分摊后放大显示                                                 * flex-shrink                          &lt;Integer&gt;                                flex-shrink:表示元素缩小比例，如果空间不够用时所有的项目同比例缩小                                    如果一个项目该属性设置为0，则空间不足时该项目也不缩小，                                    默认为1             * flex-basis    &lt;Integer&gt;             flex-basis:表示项目占据主轴空间的值，默认为auto，表示项目当前默认的大小                                    如果设置为一个固定的值，则该项目在容器中占据固定的大小             * flex  flex-grow,flex-shrink             flex:是 flex-grow,flex-shrink 两个属性的结合，默认为 0 1 auto             * align-selfflex-start | flex-end | center | baseline | strecth             align-self:表示当前项目可以和其他项目拥有不同的对齐方式，改变在容器上定义的对齐方式</code></pre><p>​</p><p>​</p><h1 id="position定位："><a href="#position定位：" class="headerlink" title="position定位："></a>position定位：</h1><pre><code class="hljs">1.适用范围：    * 任何元素都可以指定为position布局    * 格式： display:fixed2.注意事项：    * 绝对或固定元素会生成一个块级框，而不论该元素本身是什么类型    * 相对定位元素会相对与它在正常流中的默认位置偏移3.用法：    * 父相子绝：定位元素用相对定位，被定位元素用绝对定位，通常absolute和relative成对出现，一起使用    * 元素的位置通过 left,top,right,bottom 属性进行规定，单位为像素    * 元素居中的方法：position设置top，right为50%,margin设置top,right为其width和height的负的二分之一4.属性和参数：    position:absolute    |    fixed    |    relative    |    static    |    inherit                    * absolute:生成绝对定位的元素，相对于static定位以外的第一个父元素进行定位                    * fixed:生成绝对定位的元素，相对于浏览器窗口进行定位                    * relative:生成相对定位的元素，相对于其正常位置定位                    * static:没有定位，正常出现在文档流中                    * inherit:规定应该从父元素继承position属性的值</code></pre><h1 id="float-margin定位："><a href="#float-margin定位：" class="headerlink" title="float+margin定位："></a>float+margin定位：</h1><pre><code class="hljs">1.float:浮动    1.1 适用范围：        * 任何元素都可以浮动，浮动元素会生成一个块级框，而不论它是何种元素        * 格式：float:left    1.2 注意事项：        * 如果浮动非替换元素，则要指定一个明确的宽度，否则，他们会尽可能的窄        * 假如在一行之上只有极少空间可供浮动元素，那么这个元素会跳至下一行，这个过程会持续到某一行拥有足够的空间为止    1.3 属性和参数：        float:left|right|none|inherit                    * left:元素向左浮动                    * right:元素向右浮动                    * none:元素浮动，并会显示在文本中出现的位置                    * inherit:规定应该从父元素继承float属性的值2.margin:外边距    2.1 适用范围：        * 任何元素都可以使用margin        * 格式：margin:auto    2.2 注意事项：        * 自带margin的元素：body,h1~h6,dl,dd,ul,ol,p,form,thead,tbody,tfoot        * 块级元素的垂直相邻外边距会合并，而行内元素实际上不占上下外边距        * 行内元素的左右外边距不会合并，同样的，浮动元素的外边距也不会合并        * 允许指定负的外边距值，不过使用时要小心        * 无法上下居中，只能左右居中    2.3 属性和参数：        margin:auto|length|%|inherit                        * auto:浏览器自动计算外边距                        * length:规定 top,left,bottom,right 固定的值                        * 规定基于父元素的宽度的百分比的外边距                        * 规定应该从父元素继承外边距。</code></pre><h1 id="盒模型："><a href="#盒模型：" class="headerlink" title="盒模型："></a>盒模型：</h1><pre><code class="hljs">    盒模型分类：        * 标准盒模型        * IE盒模型1.IE盒模型            * 代码:box-sizing:border-box        * IE盒模型的width组成：content + 2 * padding + 2 * border        * 例如：给一个div设置宽度为200px，那这个div内容的宽度其实只有                        200px-2*padding-2*border ,它实际宽度是小于或等于200px2.标准盒模型        * 代码:box-sizing:content-box        * 标准盒模型的Width组成：content        * 例如：给一个div设置宽度为200px，那这个div的实际宽度其实是200px               +2*padding+2*border ,它实际宽度大于200px3.对比            * 两个盒模型相比较，最终是包不包含padding和border的区别        * boxsizing的默认值是content-box,即默认是标准盒模型</code></pre>]]></content>
    
    
    <categories>
      
      <category>coder</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DOM,BOM和ES</title>
    <link href="/Marvelous.github.io/2022/06/17/DOM-BOM%E5%92%8CES/"/>
    <url>/Marvelous.github.io/2022/06/17/DOM-BOM%E5%92%8CES/</url>
    
    <content type="html"><![CDATA[<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM:"></a>DOM:</h1><pre><code class="hljs">1.什么是DOM：    1.DOM全称是：Document Object Model 也就是文档对象模型，是针对XML的基于树的API    2.描述了JavaScript处理html内容的接口，是HTML和XML的API，DOM把整个页面规划成由节点层级构成的文档    3.DOM是一种基于树的API文档，实质是API，它要求在处理过程中整个文档都表示在存储器中2.DOM在一个网页中的应用：    1.DOM定义了HTMLDocument和HTMLElement作为实现操作DOM的基础，能以编程的方法操作网页中的元素（元素的增改删查），DOM把html看作是一个对象树（DOM树），html中的每个元素看作一个对象，一个Node,node可以理解为DOM中所有Object中的父类    2.DOM的存在，就是为了操作HTML中的元素，这个API使得在网页被下载到浏览器解析后还能改变网页内容成为可能3.DOM体现之处：    DOM为JavaScript提供了操作html的接口，为document:        document:            当浏览器下载一个网页解析后，这个网页通常是html,这个html就叫document，document通常是整个DOM树的root            在一个浏览器中可能会有多个document,例如通过iframe加载的页面，每一个页面都是一个document            在Javascript中，以document开头的语句几乎都是在操作DOM    * 注：要想改变html中的一个元素，就是在操作html中的一个DOM节点，而改变的前提是先要得到它，得到这个元素的过程就是获取DOM中的一个节点的实现4.document中的节点：    节点： forms location anchors images links</code></pre><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM:"></a>BOM:</h1><pre><code class="hljs">1.什么是DOM：    1.BOM全称是 Browser Object Model 浏览器对象模型，是针对为控制浏览器而产生的API文档    2.描述了JavaScript控制浏览器的接口,是Browser的API    3.是W3C的一个标准2.BOM在一个网页中的应用：    1.BOM定义了BrowserWindow作为实现操作BOM基础，能以编程的方法控制浏览器的行为（修改窗口大小，跳转页面等），BOM把浏览器看作是一个对象，窗口内每个控件是他的对象的成员    2.BOM的存在，一般是为了控制浏览器的行为3.DOM的体现之处：    BOM为JavaScript提供了操作浏览器的接口，为window:        window:            BOM的核心是window，而window对象由具有双重角色，它既是通过JavaScript访问浏览器的一个接口，又是一个Global对象。网页中定义的任何对象，变量和函数，都是以window作为其global对象            而BOM作为一个完整操作B/S结构网站的完整API，且window实现了BOM中定义的所有的方法。所以DOM中的document也是window中的一个成员对象，所以很明显的，BOM包含了DOM4.window中的成员和方法：    成员：document location navigator screen history frames</code></pre><h1 id="DOM和BOM的区别"><a href="#DOM和BOM的区别" class="headerlink" title="DOM和BOM的区别:"></a>DOM和BOM的区别:</h1><pre><code class="hljs">1.DOM描述了处理网页内容的方法和接口，BOM描述了与浏览器进行交互的方法和接口2.DOM是BOM的一个子集，BOM包含了DOM3.DOM最根本的对象document是BOM最根本对象window的一个成员对象</code></pre><h1 id="ES"><a href="#ES" class="headerlink" title="ES:"></a>ES:</h1><pre><code class="hljs">1.什么是ES：    1.ES全称 ECMAScript 描述了JavaScript的语法和基本对象    2.ECMAScript是一个抽象，JavaScript只是它的一个实例，其他实例有ActionScript    3.ECMAScript可以为不同种类的宿主环境提供核心的脚本编辑能力，即ECMAScript不与具体的宿主环境相绑定    4.ECMAScript描述了一下内容：语法格式，数据类型，关键字，保留字，运算符，对象2.注意：    1.在编写网站时用到的JavaScript是ECMAScript的一个实例，而并不是ECMAScript    2.DOM和BOM不属于ECMAScript,所以也不属于JavaScript    3.ECMAScript的实例不止JavaScript一个，还有ActionScript    4.javascript由ECMAScript实例化而来，就只是起到了一个承上启下的作用    5.BOM并不属于JavaScript,BOM只是提供接口给了JavaScript，JavaScript只不过是用其语法访问了BOM对象</code></pre>]]></content>
    
    
    <categories>
      
      <category>coder</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM整合Redis</title>
    <link href="/Marvelous.github.io/2022/06/17/SSM%E6%95%B4%E5%90%88Redis/"/>
    <url>/Marvelous.github.io/2022/06/17/SSM%E6%95%B4%E5%90%88Redis/</url>
    
    <content type="html"><![CDATA[<h2 id="1-导入Maven坐标依赖"><a href="#1-导入Maven坐标依赖" class="headerlink" title="1.导入Maven坐标依赖"></a>1.导入Maven坐标依赖</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- redis--&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;redis.clients&lt;/groupId&gt;<br>&lt;artifactId&gt;jedis&lt;/artifactId&gt;<br>&lt;version&gt;<span class="hljs-number">2.4</span><span class="hljs-number">.2</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.data&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;<br>&lt;version&gt;<span class="hljs-number">1.3</span><span class="hljs-number">.0</span>.RELEASE&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="2-创建redis-properties文件"><a href="#2-创建redis-properties文件" class="headerlink" title="2.创建redis.properties文件"></a>2.创建redis.properties文件</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">redis.host</span>=<span class="hljs-string">127.0.0.1</span><br><span class="hljs-attr">redis.port</span>=<span class="hljs-string">6379</span><br><span class="hljs-attr">redis.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-comment">#最大空闲数(默认:8)</span><br><span class="hljs-attr">redis.maxIdle</span>=<span class="hljs-string">300</span><br><span class="hljs-comment">#当连接池资源耗尽时,调用者最大阻塞时间,超时将抛出异常.单位:毫秒,默认:-1,表示永不超时.</span><br><span class="hljs-attr">redis.maxWaitMillis</span>=<span class="hljs-string">1000</span><br><span class="hljs-comment">#最大连接数(默认:8)</span><br><span class="hljs-attr">redis.maxTotal</span>=<span class="hljs-string">500</span><br><span class="hljs-comment">#指明是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个 (默认:false)</span><br><span class="hljs-attr">redis.testOnBorrow</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">redis.testOnReturn</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">redis.testWhileIdle</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">redis.blockWhenExhausted</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">redis.numTestsPerEvictionRun</span>=<span class="hljs-string">1024</span><br><span class="hljs-attr">redis.timeBetweenEvictionRunsMillis</span>=<span class="hljs-string">30000</span><br><span class="hljs-attr">redis.minEvictableIdleTimeMillis</span>=<span class="hljs-string">1800000</span><br></code></pre></td></tr></table></figure><h2 id="3-创建application-redis-xml配置文件"><a href="#3-创建application-redis-xml配置文件" class="headerlink" title="3.创建application-redis.xml配置文件"></a>3.创建application-redis.xml配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">            http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">            http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--扫描redis配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">ignore-unresolvable</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:redis.properties&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--设置连接池--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;poolConfig&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;redis.clients.jedis.JedisPoolConfig&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 最大空闲连接数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;redis.maxIdle&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 最大连接数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxTotal&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;redis.maxTotal&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 每次释放连接的最大数目 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;numTestsPerEvictionRun&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;redis.numTestsPerEvictionRun&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 释放连接的扫描间隔（毫秒） --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;timeBetweenEvictionRunsMillis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;redis.timeBetweenEvictionRunsMillis&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 连接最小空闲时间 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minEvictableIdleTimeMillis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;redis.minEvictableIdleTimeMillis&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxWaitMillis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;redis.maxWaitMillis&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 在获取连接的时候检查有效性, 默认false --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testOnBorrow&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;redis.testOnBorrow&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testOnReturn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;redis.testOnReturn&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 在空闲时检查有效性, 默认false --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testWhileIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;redis.testWhileIdle&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;blockWhenExhausted&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;redis.blockWhenExhausted&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Spring整合Jedis,设置连接属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;connectionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">p:hostName</span>=<span class="hljs-string">&quot;$&#123;redis.host&#125;&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">p:port</span>=<span class="hljs-string">&quot;$&#123;redis.port&#125;&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">p:password</span>=<span class="hljs-string">&quot;$&#123;redis.password&#125;&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">p:pool-config-ref</span>=<span class="hljs-string">&quot;poolConfig&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">p:timeout</span>=<span class="hljs-string">&quot;100000&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;redisTemplate&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.core.StringRedisTemplate&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;connectionFactory&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;connectionFactory&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 如果不配置Serializer，那么存储的时候只能使用String，如果用对象类型存储，那么会提示错误 can&#x27;t cast to String！！！--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keySerializer&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--对key的默认序列化器。默认值是StringSerializer--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--是对value的默认序列化器，默认值是取自DefaultSerializer的JdkSerializationRedisSerializer。--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;valueSerializer&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.serializer.JdkSerializationRedisSerializer&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--存储Map时key需要的序列化配置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hashKeySerializer&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--存储Map时value需要的序列化配置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hashValueSerializer&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.serializer.JdkSerializationRedisSerializer&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置redis工具类bean--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;redisUtils&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lindong.utils.RedisUtil&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-在application-xml文件中导入application-redis配置文件"><a href="#4-在application-xml文件中导入application-redis配置文件" class="headerlink" title="4.在application.xml文件中导入application-redis配置文件"></a>4.在application.xml文件中导入application-redis配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;classpath:application-redis.xml&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-创建redis工具类，便于直接使用"><a href="#5-创建redis工具类，便于直接使用" class="headerlink" title="5.创建redis工具类，便于直接使用"></a>5.创建redis工具类，便于直接使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisUtil</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定缓存失效时间</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time 时间(秒)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">expire</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                redisTemplate.expire(key, time, TimeUnit.SECONDS);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据key 获取过期时间</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 时间(秒) 返回0代表为永久有效</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getExpire</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断key是否存在</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 存在 false不存在</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasKey</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.hasKey(key);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 可以传一个值 或多个</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">del</span><span class="hljs-params">(String... key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (key != <span class="hljs-literal">null</span> &amp;&amp; key.length &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (key.length == <span class="hljs-number">1</span>) &#123;<br>                redisTemplate.delete(key[<span class="hljs-number">0</span>]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                redisTemplate.delete(CollectionUtils.arrayToList(key));<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 普通缓存获取</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-type">return</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span>= <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : redisTemplate.opsForValue().get(key);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 普通缓存放入</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true成功 false失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">set</span><span class="hljs-params">(String key, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForValue().set(key, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 普通缓存放入并设置时间</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true成功 false 失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">set</span><span class="hljs-params">(String key, Object value, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                set(key, value);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 递增</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> delta 要增加几(大于0)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">incr</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> delta)</span> &#123;<br>        <span class="hljs-keyword">if</span> (delta &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;递增因子必须大于0&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForValue().increment(key, delta);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 递减</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> delta 要减少几(小于0)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">decr</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> delta)</span> &#123;<br>        <span class="hljs-keyword">if</span> (delta &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;递减因子必须大于0&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);<br>    &#125;<br><br>    <span class="hljs-comment">// ================================Map=================================</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * HashGet</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item 项 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">hget</span><span class="hljs-params">(String key, String item)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().get(key, item);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取hashKey对应的所有键值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 对应的多个键值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Map&lt;Object, Object&gt; <span class="hljs-title function_">hmget</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().entries(key);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * HashSet</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> map 对应多个键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 成功 false 失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hmset</span><span class="hljs-params">(String key, Map&lt;String, Object&gt; map)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForHash().putAll(key, map);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * HashSet 并设置时间</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> map  对应多个键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time 时间(秒)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true成功 false失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hmset</span><span class="hljs-params">(String key, Map&lt;String, Object&gt; map, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForHash().putAll(key, map);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                expire(key, time);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向一张hash表中放入数据,如果不存在将创建</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item  项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 成功 false失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hset</span><span class="hljs-params">(String key, String item, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForHash().put(key, item, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向一张hash表中放入数据,如果不存在将创建</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item  项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 成功 false失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hset</span><span class="hljs-params">(String key, String item, Object value, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForHash().put(key, item, value);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                expire(key, time);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除hash表中的值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item 项 可以使多个 不能为null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hdel</span><span class="hljs-params">(String key, Object... item)</span> &#123;<br>        redisTemplate.opsForHash().delete(key, item);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断hash表中是否有该项的值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item 项 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 存在 false不存在</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hHasKey</span><span class="hljs-params">(String key, String item)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item 项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> by   要增加几(大于0)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">hincr</span><span class="hljs-params">(String key, String item, <span class="hljs-type">double</span> by)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * hash递减</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item 项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> by   要减少记(小于0)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">hdecr</span><span class="hljs-params">(String key, String item, <span class="hljs-type">double</span> by)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);<br>    &#125;<br><br>    <span class="hljs-comment">// ============================set=============================</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据key获取Set中的所有值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Set&lt;Object&gt; <span class="hljs-title function_">sGet</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForSet().members(key);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据value从一个set中查询,是否存在</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 存在 false不存在</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">sHasKey</span><span class="hljs-params">(String key, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForSet().isMember(key, value);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将数据放入set缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key    键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> values 值 可以是多个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成功个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">sSet</span><span class="hljs-params">(String key, Object... values)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForSet().add(key, values);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将set数据放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key    键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time   时间(秒)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> values 值 可以是多个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成功个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">sSetAndTime</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> time, Object... values)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> redisTemplate.opsForSet().add(key, values);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>)<br>            expire(key, time);<br>            <span class="hljs-keyword">return</span> count;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取set缓存的长度</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">sGetSetSize</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForSet().size(key);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 移除值为value的</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key    键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> values 值 可以是多个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 移除的个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">setRemove</span><span class="hljs-params">(String key, Object... values)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> redisTemplate.opsForSet().remove(key, values);<br>            <span class="hljs-keyword">return</span> count;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// ===============================list=================================</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取list缓存的内容</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> start 开始</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> end   结束 0 到 -1代表所有值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">lGet</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> start, <span class="hljs-type">long</span> end)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForList().range(key, start, end);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取list缓存的长度</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">lGetListSize</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForList().size(key);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过索引 获取list中的值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引 index&gt;0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">lGetIndex</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> index)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForList().index(key, index);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将list放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">lSet</span><span class="hljs-params">(String key, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().rightPush(key, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将list放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time  时间(秒)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">lSet</span><span class="hljs-params">(String key, Object value, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().rightPush(key, value);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>)<br>            expire(key, time);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将list放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">lSet</span><span class="hljs-params">(String key, List&lt;Object&gt; value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().rightPushAll(key, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将list放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time  时间(秒)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">lSet</span><span class="hljs-params">(String key, List&lt;Object&gt; value, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().rightPushAll(key, value);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>)<br>            expire(key, time);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据索引修改list中的某条数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">lUpdateIndex</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> index, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().set(key, index, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 移除N个值为value</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> count 移除多少个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 移除的个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">lRemove</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> count, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">remove</span> <span class="hljs-operator">=</span> redisTemplate.opsForList().remove(key, count, value);<br>            <span class="hljs-keyword">return</span> remove;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>coder</category>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS安装Redis</title>
    <link href="/Marvelous.github.io/2022/06/17/CentOS%E5%AE%89%E8%A3%85Redis/"/>
    <url>/Marvelous.github.io/2022/06/17/CentOS%E5%AE%89%E8%A3%85Redis/</url>
    
    <content type="html"><![CDATA[<h2 id="1-下载："><a href="#1-下载：" class="headerlink" title="1.下载："></a>1.下载：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">https://redis.io/<br>wget http://download.redis.io/releases/redis-5.0.7.tar.gz<br></code></pre></td></tr></table></figure><h2 id="2-解压："><a href="#2-解压：" class="headerlink" title="2.解压："></a>2.解压：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -xzvf redis-5.0.7.tar.gz <br></code></pre></td></tr></table></figure><h2 id="3-编译："><a href="#3-编译：" class="headerlink" title="3.编译："></a>3.编译：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install gcc<br>yum install tcl<br><br>cd redis-5.0.7/<br>make MALLOC=libc<br></code></pre></td></tr></table></figure><h2 id="4-测试编译："><a href="#4-测试编译：" class="headerlink" title="4.测试编译："></a>4.测试编译：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make test<br></code></pre></td></tr></table></figure><h2 id="5-安装"><a href="#5-安装" class="headerlink" title="5.安装:"></a>5.安装:</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/soft/</span>redis5<br>cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/soft/</span>redis5/<br>mkdir bin<br>mkdir conf<br>cd bin/<br>cp <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/source/</span>redis-<span class="hljs-number">5.0</span>.<span class="hljs-number">7</span><span class="hljs-regexp">/src/</span>redis-cli ./<br>cp <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/source/</span>redis-<span class="hljs-number">5.0</span>.<span class="hljs-number">7</span><span class="hljs-regexp">/src/</span>redis-server ./<br>cd ..<span class="hljs-regexp">/conf/</span><br>cp <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/source/</span>redis-<span class="hljs-number">5.0</span>.<span class="hljs-number">7</span><span class="hljs-regexp">/redis.conf ./</span><br></code></pre></td></tr></table></figure><h2 id="6-配置："><a href="#6-配置：" class="headerlink" title="6.配置："></a>6.配置：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi redis.conf<br><br>设置以下两个地方:<br><span class="hljs-meta prompt_"># </span><span class="language-bash">daemonize no</span><br>daemonize yes<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">maxmemory &lt;bytes&gt;</span><br>maxmemory 128MB <br><br></code></pre></td></tr></table></figure><h2 id="7-运行："><a href="#7-运行：" class="headerlink" title="7.运行："></a>7.运行：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/local/soft/redis5/bin/redis-server /usr/local/soft/redis5/conf/redis.conf<br></code></pre></td></tr></table></figure><h2 id="8-检测端口："><a href="#8-检测端口：" class="headerlink" title="8.检测端口："></a>8.检测端口：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost conf] # netstat -anp | grep 6379<br><br>tcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      16073/redis-server  <br></code></pre></td></tr></table></figure><h2 id="9-加入systemd"><a href="#9-加入systemd" class="headerlink" title="9.加入systemd:"></a>9.加入systemd:</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /lib/systemd/system/redis.service<br><br>参照修改：<br>[Unit]Description=RedisAfter=network.target             [Service]Type=forkingPIDFile=/var/run/redis_6379<br>.pidExecStart=/usr/local/soft/redis5/bin/redis-server /usr/local/soft/redis5/conf/redis<br>.confExecReload=/bin/kill -s HUP $MAINPIDExecStop=/bin/kill -s QUIT $MAINPIDPrivateTmp=true<br>[Install]WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h2 id="10-重载服务："><a href="#10-重载服务：" class="headerlink" title="10.重载服务："></a>10.重载服务：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl daemon-reload<br></code></pre></td></tr></table></figure><h2 id="11-管理redis"><a href="#11-管理redis" class="headerlink" title="11.管理redis:"></a>11.管理redis:</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">启动<br>systemctl start redis    <br>查看状态<br>systemctl status redis<br>使开机启动<br>systemctl enable redis<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>coder</category>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>CentOS</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
