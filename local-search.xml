<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MVC与Express的耦合</title>
    <link href="/Marvelous.github.io/2022/06/22/MVC%E4%B8%8EExpress%E7%9A%84%E8%80%A6%E5%90%88/"/>
    <url>/Marvelous.github.io/2022/06/22/MVC%E4%B8%8EExpress%E7%9A%84%E8%80%A6%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="1-MVC模型在Express中适用性的探究"><a href="#1-MVC模型在Express中适用性的探究" class="headerlink" title="1.MVC模型在Express中适用性的探究"></a>1.MVC模型在Express中适用性的探究</h1><svg id="SvgjsSvg1114" width="707.4375" height="460.578125" xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs">    <defs id="SvgjsDefs1115">        <marker id="SvgjsMarker1148" markerWidth="14" markerHeight="10" refX="10" refY="5" viewBox="0 0 14 10" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0">            <path id="SvgjsPath1149" d="M0,0 L14,5 L0,10 L0,0" fill="#323232" stroke="#323232" stroke-width="1"></path>        </marker>        <marker id="SvgjsMarker1152" markerWidth="14" markerHeight="10" refX="10" refY="5" viewBox="0 0 14 10" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0">            <path id="SvgjsPath1153" d="M0,0 L14,5 L0,10 L0,0" fill="#323232" stroke="#323232" stroke-width="1"></path>        </marker>        <marker id="SvgjsMarker1156" markerWidth="14" markerHeight="10" refX="10" refY="5" viewBox="0 0 14 10" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0">            <path id="SvgjsPath1157" d="M0,0 L14,5 L0,10 L0,0" fill="#323232" stroke="#323232" stroke-width="1"></path>        </marker>        <marker id="SvgjsMarker1160" markerWidth="14" markerHeight="10" refX="10" refY="5" viewBox="0 0 14 10" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0">            <path id="SvgjsPath1161" d="M0,0 L14,5 L0,10 L0,0" fill="#323232" stroke="#323232" stroke-width="1"></path>        </marker>        <marker id="SvgjsMarker1170" markerWidth="14" markerHeight="10" refX="10" refY="5" viewBox="0 0 14 10" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0">            <path id="SvgjsPath1171" d="M0,0 L14,5 L0,10 L0,0" fill="#323232" stroke="#323232" stroke-width="1"></path>        </marker>        <marker id="SvgjsMarker1180" markerWidth="14" markerHeight="10" refX="10" refY="5" viewBox="0 0 14 10" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0">            <path id="SvgjsPath1181" d="M0,0 L14,5 L0,10 L0,0" fill="#323232" stroke="#323232" stroke-width="1"></path>        </marker>        <marker id="SvgjsMarker1184" markerWidth="14" markerHeight="10" refX="10" refY="5" viewBox="0 0 14 10" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0">            <path id="SvgjsPath1185" d="M0,0 L14,5 L0,10 L0,0" fill="#323232" stroke="#323232" stroke-width="1"></path>        </marker>    </defs>    <g id="SvgjsG1116" transform="translate(25.008928571428555,213.29464285714295)">        <path id="SvgjsPath1117" d="M 0 0L 100 0L 100 70L 0 70Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path>        <g id="SvgjsG1118">            <text id="SvgjsText1119" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="80px" fill="#323232" font-weight="400" align="middle" lineHeight="125%" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="24.375" transform="rotate(0)">                <tspan id="SvgjsTspan1120" dy="16" x="50">                    <tspan id="SvgjsTspan1121" style="text-decoration:;">Application</tspan>                </tspan>            </text>        </g>    </g>    <g id="SvgjsG1122" transform="translate(424.3422619047618,25.0089285714284)">        <path id="SvgjsPath1123" d="M 0 0L 100 0L 100 70L 0 70Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path>        <g id="SvgjsG1124">            <text id="SvgjsText1125" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="80px" fill="#323232" font-weight="400" align="middle" lineHeight="125%" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="24.375" transform="rotate(0)">                <tspan id="SvgjsTspan1126" dy="16" x="50">                    <tspan id="SvgjsTspan1127" style="text-decoration:;">View</tspan>                </tspan>            </text>        </g>    </g>    <g id="SvgjsG1128" transform="translate(173.58035714285575,208.29464285714295)">        <path id="SvgjsPath1129" d="M 0 40L 60 0L 120 40L 60 80Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path>        <g id="SvgjsG1130">            <text id="SvgjsText1131" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="100px" fill="#323232" font-weight="400" align="middle" lineHeight="125%" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="29.775" transform="rotate(0)">                <tspan id="SvgjsTspan1132" dy="16" x="60">                    <tspan id="SvgjsTspan1133" style="text-decoration:;">MVC</tspan>                </tspan>            </text>        </g>    </g>    <g id="SvgjsG1134" transform="translate(424.34226190476176,130.6279761904764)">        <path id="SvgjsPath1135" d="M 0 0L 100 0L 100 70L 0 70Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path>        <g id="SvgjsG1136">            <text id="SvgjsText1137" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="80px" fill="#323232" font-weight="400" align="middle" lineHeight="125%" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="24.375" transform="rotate(0)">                <tspan id="SvgjsTspan1138" dy="16" x="50">                    <tspan id="SvgjsTspan1139" style="text-decoration:;">Model</tspan>                </tspan>            </text>        </g>    </g>    <g id="SvgjsG1140" transform="translate(424.3422619047618,365.5803571428582)">        <path id="SvgjsPath1141" d="M 0 0L 100 0L 100 70L 0 70Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path>        <g id="SvgjsG1142">            <text id="SvgjsText1143" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="80px" fill="#323232" font-weight="400" align="middle" lineHeight="125%" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="24.375" transform="rotate(0)">                <tspan id="SvgjsTspan1144" dy="16" x="50">                    <tspan id="SvgjsTspan1145" style="text-decoration:;">Controller</tspan>                </tspan>            </text>        </g>    </g>    <g id="SvgjsG1146">        <path id="SvgjsPath1147" d="M126.00892857142827 248.29464285714295L149.294642857142 248.29464285714295L149.294642857142 248.29464285714295L169.98035714285575 248.29464285714295" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1148)"></path>    </g>    <g id="SvgjsG1150">        <path id="SvgjsPath1151" d="M262.1852379325107 226.67459272327656L262.1852379325107 60.00892857142833L420.7422619047618 60.00892857142833" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1152)"></path>    </g>    <g id="SvgjsG1154">        <path id="SvgjsPath1155" d="M294.58035714285575 248.29464285714295L358.9613095238087 248.29464285714295L358.9613095238087 165.62797619047663L420.74226190476173 165.62797619047663" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1156)"></path>    </g>    <g id="SvgjsG1158">        <path id="SvgjsPath1159" d="M261.3884490424327 269.89139863714064L261.3884490424327 400.5803571428582L420.7422619047618 400.5803571428582" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1160)"></path>    </g>    <g id="SvgjsG1162" transform="translate(582.4374999999999,171.6279761904773)">        <path id="SvgjsPath1163" d="M 0 0L 100 0L 100 70L 0 70Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path>        <g id="SvgjsG1164">            <text id="SvgjsText1165" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="80px" fill="#323232" font-weight="400" align="middle" lineHeight="125%" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="24.375" transform="rotate(0)">                <tspan id="SvgjsTspan1166" dy="16" x="50">                    <tspan id="SvgjsTspan1167" style="text-decoration:;">Dao</tspan>                </tspan>            </text>        </g>    </g>    <g id="SvgjsG1168">        <path id="SvgjsPath1169" d="M525.3422619047615 165.6279761904764L553.3898809523807 165.6279761904764L553.3898809523807 206.6279761904771L578.8374999999999 206.6279761904771" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1170)"></path>    </g>    <g id="SvgjsG1172" transform="translate(582.4374999999999,82.34226190476173)">        <path id="SvgjsPath1173" d="M 0 0L 100 0L 100 70L 0 70Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path>        <g id="SvgjsG1174">            <text id="SvgjsText1175" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="80px" fill="#323232" font-weight="400" align="middle" lineHeight="125%" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="24.375" transform="rotate(0)">                <tspan id="SvgjsTspan1176" dy="16" x="50">                    <tspan id="SvgjsTspan1177" style="text-decoration:;">Pojo</tspan>                </tspan>            </text>        </g>    </g>    <g id="SvgjsG1178">        <path id="SvgjsPath1179" d="M525.3422619047615 165.6279761904764L553.3898809523807 165.6279761904764L553.3898809523807 117.3422619047621L578.8374999999999 117.3422619047621" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1180)"></path>    </g>    <g id="SvgjsG1182">        <path id="SvgjsPath1183" d="M294.58035714285575 248.29464285714295L358.9613095238088 248.29464285714295L358.9613095238088 294.1041666666667L420.7422619047618 294.1041666666667" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1184)"></path>    </g>    <g id="SvgjsG1186" transform="translate(424.3422619047618,259.1041666666667)">        <path id="SvgjsPath1187" d="M 0 0L 100 0L 100 70L 0 70Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"></path>        <g id="SvgjsG1188">            <text id="SvgjsText1189" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="80px" fill="#323232" font-weight="400" align="middle" lineHeight="125%" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="24.375" transform="rotate(0)">                <tspan id="SvgjsTspan1190" dy="16" x="50">                    <tspan id="SvgjsTspan1191" style="text-decoration:;">Service</tspan>                </tspan>            </text>        </g>    </g></svg><br /><p>在传统Java后端中，我们一般使用MVC模型来开发所需的业务逻辑，传统MVC再附加Spring的IOC和AOP特性，使得Java后端开发更为简洁和高效。同样的我们也可以将这种程序开发的思路迁移到NodeJS当中去，让一些基于NodeJS的小型web应用的开发变得更为清晰和易于维护。<font color="red"><u>请注意这不是一种新的框架，而是将MVC开发模式向Node的适配与改进。</u></font></p><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><p>​1.结构清晰，维护简便。</p><p>​2.明确分工，可持续增加业务。</p><p>​3.一站式开发，对环境的要求更低。</p><p>​4.基于ES6，代码简单。</p><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><p>​1.步骤繁琐，非开箱即用。</p><p>​2.对开发人员的业务能力有更高的要求。</p><h1 id="2-准备开发环境"><a href="#2-准备开发环境" class="headerlink" title="2.准备开发环境"></a>2.准备开发环境</h1><p>使用的包管理器基于 <font color="green"><u>yarn</u></font> ，JS语法基于 <font color="green"><u>ES6</u></font> 。</p><h5 id="初始化一个新项目"><a href="#初始化一个新项目" class="headerlink" title="初始化一个新项目"></a>初始化一个新项目</h5>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yarn init<br></code></pre></td></tr></table></figure><h5 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">yarn add express<br>yarn add bable-cli<br>yarn add nodemon<br>yarn add babel-preset-es2015 babel-preset-stage-2<br>yarn add babel-register<br></code></pre></td></tr></table></figure><h5 id="配置-yarn-启动项"><a href="#配置-yarn-启动项" class="headerlink" title="配置 yarn 启动项"></a>配置 yarn 启动项</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 在 package.json 里添加运行的脚本</span><br><br><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nodemon Application.js --exec babel-node --presets es2015,stage-2&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs she">yarn start<br></code></pre></td></tr></table></figure><h1 id="3-准备生产环境"><a href="#3-准备生产环境" class="headerlink" title="3.准备生产环境"></a>3.准备生产环境</h1><p>首先将入口文件移动到 <font color="green"><u>lib</u></font> 文件夹下,再配置yarn启动项。</p><h5 id="配置-yarn-启动项-1"><a href="#配置-yarn-启动项-1" class="headerlink" title="配置 yarn 启动项"></a>配置 yarn 启动项</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nodemon lib/Application.js --exec babel-node&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;babel lib -d dist&quot;</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;serve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node dist/Application.js&quot;</span><span class="hljs-punctuation">,</span> <br><span class="hljs-punctuation">&#125;</span><br><br>yarn start <span class="hljs-comment">// 开发环境启动</span><br>yarn build <span class="hljs-comment">// 编译生产环境</span><br>tarn serve <span class="hljs-comment">// 在生产环境启动</span><br></code></pre></td></tr></table></figure><h5 id="把babel选项保存到配置文件（-Babelrc）中"><a href="#把babel选项保存到配置文件（-Babelrc）中" class="headerlink" title="把babel选项保存到配置文件（.Babelrc）中"></a>把babel选项保存到配置文件（.Babelrc）中</h5><p>在根目录下创建一个 .babelrc 文件，然后添加如下配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;presets&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;es2015&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;stage-2&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <br>  <span class="hljs-attr">&quot;plugins&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="4-demo-预览"><a href="#4-demo-预览" class="headerlink" title="4.demo 预览"></a>4.demo 预览</h1><p>项目demo发布在github中：<a href="https://github.com/CherryMars0/Express-MVC.git">https://github.com/CherryMars0/Express-MVC.git</a></p><h1 id="5-展望"><a href="#5-展望" class="headerlink" title="5.展望"></a>5.展望</h1><p>1.继承Spring的IOC和AOP开发优点。</p><p>2.针对NodeJS进行高并发大容量的优化。</p><p>3.统筹轻量型web应用程序一站式快捷开发方式。</p><p>4.约束系统。</p>]]></content>
    
    
    <categories>
      
      <category>coder</category>
      
      <category>全栈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MVC</tag>
      
      <tag>NodeJS</tag>
      
      <tag>Express</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构总览</title>
    <link href="/Marvelous.github.io/2022/06/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%BB%E8%A7%88/"/>
    <url>/Marvelous.github.io/2022/06/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%80%BB%E8%A7%88/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h1><p><strong>1.数据结构：</strong>数据结构是<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA/140338">计算机</a>存储、组织<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE">数据</a>的方式。数据结构是指相互之间存在一种或多种特定关系的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%85%83%E7%B4%A0/715313">数据元素</a>的集合。通常情况下，精心选择的数据结构可以带来更高的运行或者存储<a href="https://baike.baidu.com/item/%E6%95%88%E7%8E%87/868847">效率</a>。数据结构往往同高效的检索<a href="https://baike.baidu.com/item/%E7%AE%97%E6%B3%95/209025">算法</a>和<a href="https://baike.baidu.com/item/%E7%B4%A2%E5%BC%95/5716853">索引</a>技术有关。</p><p><strong>2.算法：</strong>算法（Algorithm）是指解题方案的准确而完整的描述，是一系列解决问题的清晰<a href="https://baike.baidu.com/item/%E6%8C%87%E4%BB%A4/3225201">指令</a>，算法代表着用系统的方法描述解决问题的策略机制。也就是说，能够对一定规范的<a href="https://baike.baidu.com/item/%E8%BE%93%E5%85%A5/32696">输入</a>，在有限时间内获得所要求的输出。如果一个算法有缺陷，或不适合于某个问题，执行这个算法将不会解决这个问题。不同的算法可能用不同的时间，空间或效率来完成同样的任务。一个算法的优劣可以用<a href="https://baike.baidu.com/item/%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/9664257">空间复杂度</a>与<a href="https://baike.baidu.com/item/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/1894057">时间复杂度</a>来衡量。</p><p><strong>3.算法效能分析：</strong></p><img src="https://raw.githubusercontent.com/CherryMars0/blog-img/main/%E7%AE%97%E6%B3%95%E6%95%88%E8%83%BD.png" ><p><strong>4.算法：</strong></p><img src="https://raw.githubusercontent.com/CherryMars0/blog-img/main/%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95.png" ><p><strong>5.程序设计：</strong></p><img src="https://raw.githubusercontent.com/CherryMars0/blog-img/main/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%90%91.png" ><p><strong>6.数据结构：</strong></p><img src="https://raw.githubusercontent.com/CherryMars0/blog-img/main/%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" ><p><strong>7.排序和查找</strong></p>]]></content>
    
    
    <categories>
      
      <category>coder</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JAVA</tag>
      
      <tag>JavaDataStruct</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>布局与盒模型</title>
    <link href="/Marvelous.github.io/2022/06/17/%E5%B8%83%E5%B1%80%E4%B8%8E%E7%9B%92%E6%A8%A1%E5%9E%8B/"/>
    <url>/Marvelous.github.io/2022/06/17/%E5%B8%83%E5%B1%80%E4%B8%8E%E7%9B%92%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Flex布局："><a href="#Flex布局：" class="headerlink" title="Flex布局："></a>Flex布局：</h1><pre><code class="hljs">1.适用范围：            * 任何一种元素都可以指定为flex布局            * 格式 display:flex;2.注意事项：            * 如果是webkit内核的浏览器，需要加上-webkit-前缀            * 在父级元素设置flex后，子元素的 float,clear,vertical-align 属性都将会失效，所以在使用flex布局时，不应该先写好子元素后再使用flex3.容器和项目：            * 采用flex布局的父元素叫做容器            * 在flex布局里的子元素叫做项目4.项目在容器中的显示：                            #容器中有主轴和交叉轴#            * 在容器中默认有水平的主轴(X轴)和垂直的交叉轴(侧轴,Y轴)，项目在容器中默认沿主轴排列5.容器（父元素）的属性和参数：                属性   参数        * flex-direction        row | row-reverse | column | column-reverse                                        flex-direction:定义了容器主轴的方向，项目在主轴上的对齐方式                                    * row:默认值，表示沿水平方向，由左到右                                    * row-reverse:沿水平方向，由右到左                                    * column:沿垂直方向，由上到下                                    * column-reverse:表示垂直方向，由下到上        * flex-wrapnowrap | wrap | wrap-reverse                                        flex-wrap:定义了当项目在容器中一行无法显示的时候如何处理                                    * nowrap:不换行，强制在一行显示。此时项目的宽度就失效                                    * wrap:正常换行，从左至右，从上到下排列。                                    * wrap-reverse:行反转，从左至右，从下到上排列        * flew-flowflex-deriction,flex-wrap                           flew-flow:是flex-direction和flex-wrap的组合。                               * 第一个参数为flex-direction的参数                                    * 第二个参数为flex-wrap的参数        * justify-contentflex-start | flex-end | center | space-between | space-around                                  justify-content:定义了项目在容器中的对齐方式                                    * flex-start:默认值，左对齐                                    * flex-end:右对齐                                    * center:居中对齐                                    * space-between:两端对齐                                    * space-around:每个项目两侧的间距相等                                        * align-itemsflex-start | flex-end | center | baseline | strecth                                align-items:定义了当flex容器在侧轴上有多余的空间时，将子项作为一个整体进行对齐（只适用于单行）                                    * flex-start:交叉轴的起点对齐                                    * flex-end:交叉轴的终点对齐                                    * center:交叉轴居中对齐                                    * baseline:项目第一行的文字的基线对齐                                    * strecth:默认值，如果项目未设置高度或者高度为auto，项目将会占满整个容器的高度        * align-contentflex-start | flex-end | center | baseline | strecth                                align-contect:定义了项目在每个flex行的侧轴上的对齐方式（适用单行和多行）        * align-item与align-content的区别:            1.align-item 属性时针对单独的每一个flex子项起作用，它的基本单位是每一个子项，在所有情况下都有效果（也与具体的属性值有关）            2.align-content 属性是将flex子项作为一个整体起作用，它的基本单位是子项构成的每一个行，只在两种情况下有效果：                1.子项多行且flex容器高度固定                2.子项单行，flex容器高度固定且设定了 flex-wrap:wrap                6.项目的属性和参数                属性   参数              * order&lt;Integer&gt;             order:设置项目排序的位置，默认为0，数值越小越靠前                                    * &lt;Integer&gt;:排序的数值             * flex-grow&lt;Integer&gt;                                flex-grow:控制当前项目是否放大显示                                    * &lt;Integer&gt;:0 表示即时容器有剩余空间也不放大显示                                    * &lt;Integer&gt;:1 表示平均分摊后放大显示                                                 * flex-shrink                          &lt;Integer&gt;                                flex-shrink:表示元素缩小比例，如果空间不够用时所有的项目同比例缩小                                    如果一个项目该属性设置为0，则空间不足时该项目也不缩小，                                    默认为1             * flex-basis    &lt;Integer&gt;             flex-basis:表示项目占据主轴空间的值，默认为auto，表示项目当前默认的大小                                    如果设置为一个固定的值，则该项目在容器中占据固定的大小             * flex  flex-grow,flex-shrink             flex:是 flex-grow,flex-shrink 两个属性的结合，默认为 0 1 auto             * align-selfflex-start | flex-end | center | baseline | strecth             align-self:表示当前项目可以和其他项目拥有不同的对齐方式，改变在容器上定义的对齐方式</code></pre><p>​</p><p>​</p><h1 id="position定位："><a href="#position定位：" class="headerlink" title="position定位："></a>position定位：</h1><pre><code class="hljs">1.适用范围：    * 任何元素都可以指定为position布局    * 格式： display:fixed2.注意事项：    * 绝对或固定元素会生成一个块级框，而不论该元素本身是什么类型    * 相对定位元素会相对与它在正常流中的默认位置偏移3.用法：    * 父相子绝：定位元素用相对定位，被定位元素用绝对定位，通常absolute和relative成对出现，一起使用    * 元素的位置通过 left,top,right,bottom 属性进行规定，单位为像素    * 元素居中的方法：position设置top，right为50%,margin设置top,right为其width和height的负的二分之一4.属性和参数：    position:absolute    |    fixed    |    relative    |    static    |    inherit                    * absolute:生成绝对定位的元素，相对于static定位以外的第一个父元素进行定位                    * fixed:生成绝对定位的元素，相对于浏览器窗口进行定位                    * relative:生成相对定位的元素，相对于其正常位置定位                    * static:没有定位，正常出现在文档流中                    * inherit:规定应该从父元素继承position属性的值</code></pre><h1 id="float-margin定位："><a href="#float-margin定位：" class="headerlink" title="float+margin定位："></a>float+margin定位：</h1><pre><code class="hljs">1.float:浮动    1.1 适用范围：        * 任何元素都可以浮动，浮动元素会生成一个块级框，而不论它是何种元素        * 格式：float:left    1.2 注意事项：        * 如果浮动非替换元素，则要指定一个明确的宽度，否则，他们会尽可能的窄        * 假如在一行之上只有极少空间可供浮动元素，那么这个元素会跳至下一行，这个过程会持续到某一行拥有足够的空间为止    1.3 属性和参数：        float:left|right|none|inherit                    * left:元素向左浮动                    * right:元素向右浮动                    * none:元素浮动，并会显示在文本中出现的位置                    * inherit:规定应该从父元素继承float属性的值2.margin:外边距    2.1 适用范围：        * 任何元素都可以使用margin        * 格式：margin:auto    2.2 注意事项：        * 自带margin的元素：body,h1~h6,dl,dd,ul,ol,p,form,thead,tbody,tfoot        * 块级元素的垂直相邻外边距会合并，而行内元素实际上不占上下外边距        * 行内元素的左右外边距不会合并，同样的，浮动元素的外边距也不会合并        * 允许指定负的外边距值，不过使用时要小心        * 无法上下居中，只能左右居中    2.3 属性和参数：        margin:auto|length|%|inherit                        * auto:浏览器自动计算外边距                        * length:规定 top,left,bottom,right 固定的值                        * 规定基于父元素的宽度的百分比的外边距                        * 规定应该从父元素继承外边距。</code></pre><h1 id="盒模型："><a href="#盒模型：" class="headerlink" title="盒模型："></a>盒模型：</h1><pre><code class="hljs">    盒模型分类：        * 标准盒模型        * IE盒模型1.IE盒模型            * 代码:box-sizing:border-box        * IE盒模型的width组成：content + 2 * padding + 2 * border        * 例如：给一个div设置宽度为200px，那这个div内容的宽度其实只有                        200px-2*padding-2*border ,它实际宽度是小于或等于200px2.标准盒模型        * 代码:box-sizing:content-box        * 标准盒模型的Width组成：content        * 例如：给一个div设置宽度为200px，那这个div的实际宽度其实是200px               +2*padding+2*border ,它实际宽度大于200px3.对比            * 两个盒模型相比较，最终是包不包含padding和border的区别        * boxsizing的默认值是content-box,即默认是标准盒模型</code></pre>]]></content>
    
    
    <categories>
      
      <category>coder</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DOM,BOM和ES</title>
    <link href="/Marvelous.github.io/2022/06/17/DOM-BOM%E5%92%8CES/"/>
    <url>/Marvelous.github.io/2022/06/17/DOM-BOM%E5%92%8CES/</url>
    
    <content type="html"><![CDATA[<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM:"></a>DOM:</h1><pre><code class="hljs">1.什么是DOM：    1.DOM全称是：Document Object Model 也就是文档对象模型，是针对XML的基于树的API    2.描述了JavaScript处理html内容的接口，是HTML和XML的API，DOM把整个页面规划成由节点层级构成的文档    3.DOM是一种基于树的API文档，实质是API，它要求在处理过程中整个文档都表示在存储器中2.DOM在一个网页中的应用：    1.DOM定义了HTMLDocument和HTMLElement作为实现操作DOM的基础，能以编程的方法操作网页中的元素（元素的增改删查），DOM把html看作是一个对象树（DOM树），html中的每个元素看作一个对象，一个Node,node可以理解为DOM中所有Object中的父类    2.DOM的存在，就是为了操作HTML中的元素，这个API使得在网页被下载到浏览器解析后还能改变网页内容成为可能3.DOM体现之处：    DOM为JavaScript提供了操作html的接口，为document:        document:            当浏览器下载一个网页解析后，这个网页通常是html,这个html就叫document，document通常是整个DOM树的root            在一个浏览器中可能会有多个document,例如通过iframe加载的页面，每一个页面都是一个document            在Javascript中，以document开头的语句几乎都是在操作DOM    * 注：要想改变html中的一个元素，就是在操作html中的一个DOM节点，而改变的前提是先要得到它，得到这个元素的过程就是获取DOM中的一个节点的实现4.document中的节点：    节点： forms location anchors images links</code></pre><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM:"></a>BOM:</h1><pre><code class="hljs">1.什么是DOM：    1.BOM全称是 Browser Object Model 浏览器对象模型，是针对为控制浏览器而产生的API文档    2.描述了JavaScript控制浏览器的接口,是Browser的API    3.是W3C的一个标准2.BOM在一个网页中的应用：    1.BOM定义了BrowserWindow作为实现操作BOM基础，能以编程的方法控制浏览器的行为（修改窗口大小，跳转页面等），BOM把浏览器看作是一个对象，窗口内每个控件是他的对象的成员    2.BOM的存在，一般是为了控制浏览器的行为3.DOM的体现之处：    BOM为JavaScript提供了操作浏览器的接口，为window:        window:            BOM的核心是window，而window对象由具有双重角色，它既是通过JavaScript访问浏览器的一个接口，又是一个Global对象。网页中定义的任何对象，变量和函数，都是以window作为其global对象            而BOM作为一个完整操作B/S结构网站的完整API，且window实现了BOM中定义的所有的方法。所以DOM中的document也是window中的一个成员对象，所以很明显的，BOM包含了DOM4.window中的成员和方法：    成员：document location navigator screen history frames</code></pre><h1 id="DOM和BOM的区别"><a href="#DOM和BOM的区别" class="headerlink" title="DOM和BOM的区别:"></a>DOM和BOM的区别:</h1><pre><code class="hljs">1.DOM描述了处理网页内容的方法和接口，BOM描述了与浏览器进行交互的方法和接口2.DOM是BOM的一个子集，BOM包含了DOM3.DOM最根本的对象document是BOM最根本对象window的一个成员对象</code></pre><h1 id="ES"><a href="#ES" class="headerlink" title="ES:"></a>ES:</h1><pre><code class="hljs">1.什么是ES：    1.ES全称 ECMAScript 描述了JavaScript的语法和基本对象    2.ECMAScript是一个抽象，JavaScript只是它的一个实例，其他实例有ActionScript    3.ECMAScript可以为不同种类的宿主环境提供核心的脚本编辑能力，即ECMAScript不与具体的宿主环境相绑定    4.ECMAScript描述了一下内容：语法格式，数据类型，关键字，保留字，运算符，对象2.注意：    1.在编写网站时用到的JavaScript是ECMAScript的一个实例，而并不是ECMAScript    2.DOM和BOM不属于ECMAScript,所以也不属于JavaScript    3.ECMAScript的实例不止JavaScript一个，还有ActionScript    4.javascript由ECMAScript实例化而来，就只是起到了一个承上启下的作用    5.BOM并不属于JavaScript,BOM只是提供接口给了JavaScript，JavaScript只不过是用其语法访问了BOM对象</code></pre>]]></content>
    
    
    <categories>
      
      <category>coder</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM整合Redis</title>
    <link href="/Marvelous.github.io/2022/06/17/SSM%E6%95%B4%E5%90%88Redis/"/>
    <url>/Marvelous.github.io/2022/06/17/SSM%E6%95%B4%E5%90%88Redis/</url>
    
    <content type="html"><![CDATA[<h2 id="1-导入Maven坐标依赖"><a href="#1-导入Maven坐标依赖" class="headerlink" title="1.导入Maven坐标依赖"></a>1.导入Maven坐标依赖</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- redis--&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;redis.clients&lt;/groupId&gt;<br>&lt;artifactId&gt;jedis&lt;/artifactId&gt;<br>&lt;version&gt;<span class="hljs-number">2.4</span><span class="hljs-number">.2</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>&lt;groupId&gt;org.springframework.data&lt;/groupId&gt;<br>&lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;<br>&lt;version&gt;<span class="hljs-number">1.3</span><span class="hljs-number">.0</span>.RELEASE&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="2-创建redis-properties文件"><a href="#2-创建redis-properties文件" class="headerlink" title="2.创建redis.properties文件"></a>2.创建redis.properties文件</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">redis.host</span>=<span class="hljs-string">127.0.0.1</span><br><span class="hljs-attr">redis.port</span>=<span class="hljs-string">6379</span><br><span class="hljs-attr">redis.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-comment">#最大空闲数(默认:8)</span><br><span class="hljs-attr">redis.maxIdle</span>=<span class="hljs-string">300</span><br><span class="hljs-comment">#当连接池资源耗尽时,调用者最大阻塞时间,超时将抛出异常.单位:毫秒,默认:-1,表示永不超时.</span><br><span class="hljs-attr">redis.maxWaitMillis</span>=<span class="hljs-string">1000</span><br><span class="hljs-comment">#最大连接数(默认:8)</span><br><span class="hljs-attr">redis.maxTotal</span>=<span class="hljs-string">500</span><br><span class="hljs-comment">#指明是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个 (默认:false)</span><br><span class="hljs-attr">redis.testOnBorrow</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">redis.testOnReturn</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">redis.testWhileIdle</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">redis.blockWhenExhausted</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">redis.numTestsPerEvictionRun</span>=<span class="hljs-string">1024</span><br><span class="hljs-attr">redis.timeBetweenEvictionRunsMillis</span>=<span class="hljs-string">30000</span><br><span class="hljs-attr">redis.minEvictableIdleTimeMillis</span>=<span class="hljs-string">1800000</span><br></code></pre></td></tr></table></figure><h2 id="3-创建application-redis-xml配置文件"><a href="#3-创建application-redis-xml配置文件" class="headerlink" title="3.创建application-redis.xml配置文件"></a>3.创建application-redis.xml配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:p</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:context</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">            http://www.springframework.org/schema/beans</span></span><br><span class="hljs-string"><span class="hljs-tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="hljs-string"><span class="hljs-tag">            http://www.springframework.org/schema/context</span></span><br><span class="hljs-string"><span class="hljs-tag">            http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--扫描redis配置文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">context:property-placeholder</span> <span class="hljs-attr">ignore-unresolvable</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;classpath:redis.properties&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--设置连接池--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;poolConfig&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;redis.clients.jedis.JedisPoolConfig&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 最大空闲连接数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;redis.maxIdle&#125;&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 最大连接数 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxTotal&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;redis.maxTotal&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 每次释放连接的最大数目 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;numTestsPerEvictionRun&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;redis.numTestsPerEvictionRun&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 释放连接的扫描间隔（毫秒） --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;timeBetweenEvictionRunsMillis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;redis.timeBetweenEvictionRunsMillis&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 连接最小空闲时间 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;minEvictableIdleTimeMillis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;redis.minEvictableIdleTimeMillis&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;maxWaitMillis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;redis.maxWaitMillis&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 在获取连接的时候检查有效性, 默认false --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testOnBorrow&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;redis.testOnBorrow&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testOnReturn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;redis.testOnReturn&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 在空闲时检查有效性, 默认false --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;testWhileIdle&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;redis.testWhileIdle&#125;&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;blockWhenExhausted&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;redis.blockWhenExhausted&#125;&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Spring整合Jedis,设置连接属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;connectionFactory&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">p:hostName</span>=<span class="hljs-string">&quot;$&#123;redis.host&#125;&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">p:port</span>=<span class="hljs-string">&quot;$&#123;redis.port&#125;&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">p:password</span>=<span class="hljs-string">&quot;$&#123;redis.password&#125;&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">p:pool-config-ref</span>=<span class="hljs-string">&quot;poolConfig&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">p:timeout</span>=<span class="hljs-string">&quot;100000&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;redisTemplate&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.core.StringRedisTemplate&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;connectionFactory&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;connectionFactory&quot;</span> /&gt;</span><br>        <span class="hljs-comment">&lt;!-- 如果不配置Serializer，那么存储的时候只能使用String，如果用对象类型存储，那么会提示错误 can&#x27;t cast to String！！！--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keySerializer&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--对key的默认序列化器。默认值是StringSerializer--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--是对value的默认序列化器，默认值是取自DefaultSerializer的JdkSerializationRedisSerializer。--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;valueSerializer&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.serializer.JdkSerializationRedisSerializer&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--存储Map时key需要的序列化配置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hashKeySerializer&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--存储Map时value需要的序列化配置--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hashValueSerializer&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.data.redis.serializer.JdkSerializationRedisSerializer&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--配置redis工具类bean--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;redisUtils&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.lindong.utils.RedisUtil&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-在application-xml文件中导入application-redis配置文件"><a href="#4-在application-xml文件中导入application-redis配置文件" class="headerlink" title="4.在application.xml文件中导入application-redis配置文件"></a>4.在application.xml文件中导入application-redis配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">import</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;classpath:application-redis.xml&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5-创建redis工具类，便于直接使用"><a href="#5-创建redis工具类，便于直接使用" class="headerlink" title="5.创建redis工具类，便于直接使用"></a>5.创建redis工具类，便于直接使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisUtil</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定缓存失效时间</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time 时间(秒)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">expire</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                redisTemplate.expire(key, time, TimeUnit.SECONDS);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据key 获取过期时间</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 时间(秒) 返回0代表为永久有效</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getExpire</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断key是否存在</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 存在 false不存在</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasKey</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.hasKey(key);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 可以传一个值 或多个</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">del</span><span class="hljs-params">(String... key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (key != <span class="hljs-literal">null</span> &amp;&amp; key.length &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (key.length == <span class="hljs-number">1</span>) &#123;<br>                redisTemplate.delete(key[<span class="hljs-number">0</span>]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                redisTemplate.delete(CollectionUtils.arrayToList(key));<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 普通缓存获取</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-type">return</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span>= <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : redisTemplate.opsForValue().get(key);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 普通缓存放入</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true成功 false失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">set</span><span class="hljs-params">(String key, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForValue().set(key, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 普通缓存放入并设置时间</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true成功 false 失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">set</span><span class="hljs-params">(String key, Object value, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                set(key, value);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 递增</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> delta 要增加几(大于0)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">incr</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> delta)</span> &#123;<br>        <span class="hljs-keyword">if</span> (delta &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;递增因子必须大于0&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForValue().increment(key, delta);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 递减</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> delta 要减少几(小于0)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">decr</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> delta)</span> &#123;<br>        <span class="hljs-keyword">if</span> (delta &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;递减因子必须大于0&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);<br>    &#125;<br><br>    <span class="hljs-comment">// ================================Map=================================</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * HashGet</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item 项 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">hget</span><span class="hljs-params">(String key, String item)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().get(key, item);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取hashKey对应的所有键值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 对应的多个键值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Map&lt;Object, Object&gt; <span class="hljs-title function_">hmget</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().entries(key);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * HashSet</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> map 对应多个键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 成功 false 失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hmset</span><span class="hljs-params">(String key, Map&lt;String, Object&gt; map)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForHash().putAll(key, map);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * HashSet 并设置时间</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> map  对应多个键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time 时间(秒)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true成功 false失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hmset</span><span class="hljs-params">(String key, Map&lt;String, Object&gt; map, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForHash().putAll(key, map);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                expire(key, time);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向一张hash表中放入数据,如果不存在将创建</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item  项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 成功 false失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hset</span><span class="hljs-params">(String key, String item, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForHash().put(key, item, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向一张hash表中放入数据,如果不存在将创建</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item  项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 成功 false失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hset</span><span class="hljs-params">(String key, String item, Object value, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForHash().put(key, item, value);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                expire(key, time);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除hash表中的值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item 项 可以使多个 不能为null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hdel</span><span class="hljs-params">(String key, Object... item)</span> &#123;<br>        redisTemplate.opsForHash().delete(key, item);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断hash表中是否有该项的值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item 项 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 存在 false不存在</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hHasKey</span><span class="hljs-params">(String key, String item)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item 项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> by   要增加几(大于0)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">hincr</span><span class="hljs-params">(String key, String item, <span class="hljs-type">double</span> by)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * hash递减</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item 项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> by   要减少记(小于0)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">hdecr</span><span class="hljs-params">(String key, String item, <span class="hljs-type">double</span> by)</span> &#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);<br>    &#125;<br><br>    <span class="hljs-comment">// ============================set=============================</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据key获取Set中的所有值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Set&lt;Object&gt; <span class="hljs-title function_">sGet</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForSet().members(key);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据value从一个set中查询,是否存在</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 存在 false不存在</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">sHasKey</span><span class="hljs-params">(String key, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForSet().isMember(key, value);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将数据放入set缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key    键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> values 值 可以是多个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成功个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">sSet</span><span class="hljs-params">(String key, Object... values)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForSet().add(key, values);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将set数据放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key    键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time   时间(秒)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> values 值 可以是多个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成功个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">sSetAndTime</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> time, Object... values)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> redisTemplate.opsForSet().add(key, values);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>)<br>            expire(key, time);<br>            <span class="hljs-keyword">return</span> count;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取set缓存的长度</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">sGetSetSize</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForSet().size(key);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 移除值为value的</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key    键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> values 值 可以是多个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 移除的个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">setRemove</span><span class="hljs-params">(String key, Object... values)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> redisTemplate.opsForSet().remove(key, values);<br>            <span class="hljs-keyword">return</span> count;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// ===============================list=================================</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取list缓存的内容</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> start 开始</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> end   结束 0 到 -1代表所有值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">lGet</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> start, <span class="hljs-type">long</span> end)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForList().range(key, start, end);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取list缓存的长度</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">lGetListSize</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForList().size(key);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过索引 获取list中的值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引 index&gt;0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">lGetIndex</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> index)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForList().index(key, index);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将list放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">lSet</span><span class="hljs-params">(String key, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().rightPush(key, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将list放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time  时间(秒)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">lSet</span><span class="hljs-params">(String key, Object value, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().rightPush(key, value);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>)<br>            expire(key, time);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将list放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">lSet</span><span class="hljs-params">(String key, List&lt;Object&gt; value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().rightPushAll(key, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将list放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time  时间(秒)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">lSet</span><span class="hljs-params">(String key, List&lt;Object&gt; value, <span class="hljs-type">long</span> time)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().rightPushAll(key, value);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>)<br>            expire(key, time);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据索引修改list中的某条数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">lUpdateIndex</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> index, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().set(key, index, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 移除N个值为value</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> count 移除多少个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 移除的个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">lRemove</span><span class="hljs-params">(String key, <span class="hljs-type">long</span> count, Object value)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">remove</span> <span class="hljs-operator">=</span> redisTemplate.opsForList().remove(key, count, value);<br>            <span class="hljs-keyword">return</span> remove;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>coder</category>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS安装Redis</title>
    <link href="/Marvelous.github.io/2022/06/17/CentOS%E5%AE%89%E8%A3%85Redis/"/>
    <url>/Marvelous.github.io/2022/06/17/CentOS%E5%AE%89%E8%A3%85Redis/</url>
    
    <content type="html"><![CDATA[<h2 id="1-下载："><a href="#1-下载：" class="headerlink" title="1.下载："></a>1.下载：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">https://redis.io/<br>wget http://download.redis.io/releases/redis-5.0.7.tar.gz<br></code></pre></td></tr></table></figure><h2 id="2-解压："><a href="#2-解压：" class="headerlink" title="2.解压："></a>2.解压：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -xzvf redis-5.0.7.tar.gz <br></code></pre></td></tr></table></figure><h2 id="3-编译："><a href="#3-编译：" class="headerlink" title="3.编译："></a>3.编译：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install gcc<br>yum install tcl<br><br>cd redis-5.0.7/<br>make MALLOC=libc<br></code></pre></td></tr></table></figure><h2 id="4-测试编译："><a href="#4-测试编译：" class="headerlink" title="4.测试编译："></a>4.测试编译：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make test<br></code></pre></td></tr></table></figure><h2 id="5-安装"><a href="#5-安装" class="headerlink" title="5.安装:"></a>5.安装:</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/soft/</span>redis5<br>cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/soft/</span>redis5/<br>mkdir bin<br>mkdir conf<br>cd bin/<br>cp <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/source/</span>redis-<span class="hljs-number">5.0</span>.<span class="hljs-number">7</span><span class="hljs-regexp">/src/</span>redis-cli ./<br>cp <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/source/</span>redis-<span class="hljs-number">5.0</span>.<span class="hljs-number">7</span><span class="hljs-regexp">/src/</span>redis-server ./<br>cd ..<span class="hljs-regexp">/conf/</span><br>cp <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/source/</span>redis-<span class="hljs-number">5.0</span>.<span class="hljs-number">7</span><span class="hljs-regexp">/redis.conf ./</span><br></code></pre></td></tr></table></figure><h2 id="6-配置："><a href="#6-配置：" class="headerlink" title="6.配置："></a>6.配置：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi redis.conf<br><br>设置以下两个地方:<br><span class="hljs-meta prompt_"># </span><span class="language-bash">daemonize no</span><br>daemonize yes<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">maxmemory &lt;bytes&gt;</span><br>maxmemory 128MB <br><br></code></pre></td></tr></table></figure><h2 id="7-运行："><a href="#7-运行：" class="headerlink" title="7.运行："></a>7.运行：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/local/soft/redis5/bin/redis-server /usr/local/soft/redis5/conf/redis.conf<br></code></pre></td></tr></table></figure><h2 id="8-检测端口："><a href="#8-检测端口：" class="headerlink" title="8.检测端口："></a>8.检测端口：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost conf] # netstat -anp | grep 6379<br><br>tcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      16073/redis-server  <br></code></pre></td></tr></table></figure><h2 id="9-加入systemd"><a href="#9-加入systemd" class="headerlink" title="9.加入systemd:"></a>9.加入systemd:</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /lib/systemd/system/redis.service<br><br>参照修改：<br>[Unit]Description=RedisAfter=network.target             [Service]Type=forkingPIDFile=/var/run/redis_6379<br>.pidExecStart=/usr/local/soft/redis5/bin/redis-server /usr/local/soft/redis5/conf/redis<br>.confExecReload=/bin/kill -s HUP $MAINPIDExecStop=/bin/kill -s QUIT $MAINPIDPrivateTmp=true<br>[Install]WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h2 id="10-重载服务："><a href="#10-重载服务：" class="headerlink" title="10.重载服务："></a>10.重载服务：</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl daemon-reload<br></code></pre></td></tr></table></figure><h2 id="11-管理redis"><a href="#11-管理redis" class="headerlink" title="11.管理redis:"></a>11.管理redis:</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">启动<br>systemctl start redis    <br>查看状态<br>systemctl status redis<br>使开机启动<br>systemctl enable redis<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>coder</category>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>CentOS</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
